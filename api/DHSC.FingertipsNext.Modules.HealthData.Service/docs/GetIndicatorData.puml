@startuml GetIndicatorData
  title "Get Indicator Data Service"
   
   
   actor "Caller" as caller
   participant "Server Router" as router
   participant "IndicatorsController" as controller
   participant "service.getIndicatorDataAsync" as getIndicator
   participant "BenchmarkComparisonEngine" as benchmarkComparisonEngine
   database "Health Database" as db

  caller  -> router : '{HOST_URL}/{indicatorId:int}/data'
  
  router -> controller : GetIndicatorDataAsync(indicatorId,areaCodes, years, inequalities, comparison_method )
  
  controller  -> controller : status = validateRequestDataLength(areaCodes, years)
  
  alt status != true
     controller --> router : [throw Exception , statusCode = 500]
     router --> caller :  [statusCode = 500]
  end

    controller -> getIndicator : GetIndicatorDataAsync(indicatorID, areaCodes, years, inequalities, comparisonMethod)
         
  
    alt  hasBenchmarkDataRequested && !wasBenchmarkAreaCodeProvided
      getIndicator --> getIndicator : areaCodes.add(benchmarkCode)
    
    end
  
    getIndicator ->  db : GetIndicatorDataAsync(indicatorId, areaCodes, years, inequalities) 
   
    db -->  getIndicator : [ healthMeasureData ]
    
    getIndicator --> getIndicator : healthDataForArea =  reGroupDataConverterBy(AreaDimension.code, AreaDimension.name)
    
    alt !hasBenchmarkDataRequested
       getIndicator --> controller : [healthDataForArea]
       controller --> router : [Json(healthDataForArea) , statusCode = 200]
       router --> caller :  [statusCode = 200, data=healthDataForArea]
    end
    
    getIndicator --> getIndicator : benchmarkHealthData = filterBenchmarkDataFrom(healthDataForArea, benchmarkAreaCode)
   
   alt  benchmarkHealthData == null 
      getIndicator --> controller : [healthDataForArea]
      controller --> router : [Json(healthDataForArea) , statusCode = 200]
      router --> caller :  [statusCode = 200, data=healthDataForArea]
   end
   
   alt !wasBenchmarkAreaCodeProvided
     getIndicator --> getIndicator : healthDataForArea.remove(benchmarkAreaCode)
   end
   
   getIndicator -> benchmarkComparisonEngine : ProcessBenchmarkComparisons(healthDataForArea, benchmarkHealthData, comparisonMethod, IndicatorPolarity.HighIsGood)
   
   benchmarkComparisonEngine -->  getIndicator : data: HealthDataForArea[]
   
   getIndicator --> controller : [healthDataForAreas]
   
   controller  --> router : [data = healthDataForAreas, statusCode: 200]
   
   router  --> caller : [data = Json(healthDataForAreas], statusCode: 200]
 

 
 
@enduml