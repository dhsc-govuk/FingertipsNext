
### Check from Date is inclusive
GET http://localhost:5144/indicators/94063/data?area_codes=D82017&area_codes=D82023&area_codes=D82024&area_codes=D82040&area_codes=D82060&from_date=2022-04-06
> {%
        client.test("Check from Date is inclusive", function (callbackfn, thisArg) {
        client.assert(response.status === 200, "Response status is not 200");
        const expectedResults = [ 
            {areaName:"Trinity & Bowthorpe Medical Practice", from:"2022-04-06", sex:"Female", value:65.0943396226415},  
            {areaName:"Trinity & Bowthorpe Medical Practice", from:"2023-04-06", sex:"Female", value:65.4205607476636},  
            {areaName:"Roundwell Medical Centre", from:"2022-04-06", sex:"Female", value:72.7626459143969},  
            {areaName:"Roundwell Medical Centre", from:"2023-04-06", sex:"Female", value:71.7557251908397},  
            {areaName:"Taverham Surgery", from:"2022-04-06", sex:"Female", value:77.2277227722772},  
            {areaName:"Taverham Surgery", from:"2023-04-06", sex:"Female", value:79.7101449275362},  
            {areaName:"Wensum Valley Medical Practice", from:"2022-04-06", sex:"Female", value:58.7677725118483},  
            {areaName:"Wensum Valley Medical Practice", from:"2023-04-06", sex:"Female", value:57.6923076923077},  
            {areaName:"Bacon Road Medical Centre", from:"2022-04-06", sex:"Female", value:63.0434782608696},  
            {areaName:"Bacon Road Medical Centre", from:"2023-04-06", sex:"Female", value:68.0851063829787},  
        ];

        // Count all healthData points in all indicatorSegments for all areas
        const numHealthDataPoints = response.body.areaHealthData
            .map(area => area.indicatorSegment
                .map(segment => segment.healthData.length)
                .reduce((sum, count) => sum + count, 0)
            )
            .reduce((total, count) => total + count, 0);

        client.assert(
            numHealthDataPoints === expectedResults.length,
            `Expected ${expectedResults.length} indicatorSegment health data items, but got ${numHealthDataPoints}`
        );

        expectedResults.forEach((expected) => {
            const area = response.body.areaHealthData.find(area => area.areaName === expected.areaName);
            client.assert(area, `Area not found: ${expected.areaName}`);
            const segment = area.indicatorSegment.find(segment => segment.sex.value === expected.sex);
            client.assert(segment, `Segment not found for sex: ${expected.sex} in area: ${expected.areaName}`);
            const dataPoint = segment.healthData.find(dataPoint => dataPoint.datePeriod.from === expected.from);
            client.assert(
                dataPoint && dataPoint.value === expected.value,
                `failed for ${expected.areaName} ${expected.sex} ${expected.from}: expected value ${expected.value}, got ${dataPoint ? dataPoint.value : 'undefined'}`
            );
        });
        });
%}



### Check from-date excludes earlier points - and absence of to-date includes all later points
GET http://localhost:5144/indicators/94063/data?area_codes=D82017&area_codes=D82023&area_codes=D82024&area_codes=D82040&area_codes=D82060&from_date=2022-04-07
> {%
    client.test("Check from-date is inclusive of the requested date and excludes earlier points - and absence of to-date includes all later points", function (callbackfn, thisArg) {
        client.assert(response.status === 200, "Response status is not 200");
    const expectedResults = [ 
        {areaName:"Trinity & Bowthorpe Medical Practice", from:"2023-04-06", sex:"Female", value: 65.4205607476636},  
        {areaName:"Roundwell Medical Centre", from:"2023-04-06", sex:"Female", value: 71.7557251908397},  
        {areaName:"Taverham Surgery", from:"2023-04-06", sex:"Female", value: 79.7101449275362},  
        {areaName:"Wensum Valley Medical Practice", from:"2023-04-06", sex:"Female", value: 57.6923076923077},  
        {areaName:"Bacon Road Medical Centre", from:"2023-04-06", sex:"Female", value: 68.0851063829787},  
    ];

    // Count all healthData points in all indicatorSegments for all areas
    const numHealthDataPoints = response.body.areaHealthData
        .map(area => area.indicatorSegment
            .map(segment => segment.healthData.length)
            .reduce((sum, count) => sum + count, 0)
        )
        .reduce((total, count) => total + count, 0);

    client.assert(
        numHealthDataPoints === expectedResults.length,
        `Expected ${expectedResults.length} indicatorSegment health data items, but got ${numHealthDataPoints}`
    );



    expectedResults.forEach((expected) => {
        const area = response.body.areaHealthData.find(area => area.areaName === expected.areaName);
        client.assert(area, `Area not found: ${expected.areaName}`);
        const segment = area.indicatorSegment.find(segment => segment.sex.value === expected.sex);
        client.assert(segment, `Segment not found for sex: ${expected.sex} in area: ${expected.areaName}`);
        const dataPoint = segment.healthData.find(dataPoint => dataPoint.datePeriod.from === expected.from);
        client.assert(
            dataPoint && dataPoint.value === expected.value,
            `failed for ${expected.areaName} ${expected.sex} ${expected.from}: expected value ${expected.value}, got ${dataPoint ? dataPoint.value : 'undefined'}`
        );
    });
});
%}


### Check to-date is inclusive of the requested date and excludes later points and - and absence of from-date includes all earlier points
GET http://localhost:5144/indicators/94063/data?area_codes=D82017&area_codes=D82023&area_codes=D82024&area_codes=D82040&area_codes=D82060&to_date=2024-04-05
> {%
client.test("Check to-date is inclusive of the requested date and excludes later points and - and absence of from-date includes all earlier points", function (callbackfn, thisArg) {
    client.assert(response.status === 200, "Response status is not 200");
    const expectedResults = [ 
        {areaName:"Trinity & Bowthorpe Medical Practice", from:"2022-04-06", sex:"Female", value:65.0943396226415},  
        {areaName:"Trinity & Bowthorpe Medical Practice", from:"2023-04-06", sex:"Female", value: 65.4205607476636},  
        {areaName:"Roundwell Medical Centre", from:"2022-04-06", sex:"Female", value: 72.7626459143969},  
        {areaName:"Roundwell Medical Centre", from:"2023-04-06", sex:"Female", value: 71.7557251908397},  
        {areaName:"Taverham Surgery", from:"2022-04-06", sex:"Female", value: 77.2277227722772},  
        {areaName:"Taverham Surgery", from:"2023-04-06", sex:"Female", value: 79.7101449275362},  
        {areaName:"Wensum Valley Medical Practice", from:"2022-04-06", sex:"Female", value: 58.7677725118483},  
        {areaName:"Wensum Valley Medical Practice", from:"2023-04-06", sex:"Female", value: 57.6923076923077},  
        {areaName:"Bacon Road Medical Centre", from:"2022-04-06", sex:"Female", value: 63.0434782608696},  
        {areaName:"Bacon Road Medical Centre", from:"2023-04-06", sex:"Female", value: 68.0851063829787},  
    ];

    // Count all healthData points in all indicatorSegments for all areas
    const numHealthDataPoints = response.body.areaHealthData
        .map(area => area.indicatorSegment
            .map(segment => segment.healthData.length)
            .reduce((sum, count) => sum + count, 0)
        )
        .reduce((total, count) => total + count, 0);

    client.assert(
        numHealthDataPoints === expectedResults.length,
        `Expected ${expectedResults.length} indicatorSegment health data items, but got ${numHealthDataPoints}`
    );

    expectedResults.forEach((expected) => {
        const area = response.body.areaHealthData.find(area => area.areaName === expected.areaName);
        client.assert(area, `Area not found: ${expected.areaName}`);
        const segment = area.indicatorSegment.find(segment => segment.sex.value === expected.sex);
        client.assert(segment, `Segment not found for sex: ${expected.sex} in area: ${expected.areaName}`);
        const dataPoint = segment.healthData.find(dataPoint => dataPoint.datePeriod.from === expected.from);
        client.assert(
            dataPoint && dataPoint.value === expected.value,
            `failed for ${expected.areaName} ${expected.sex} ${expected.from}: expected value ${expected.value}, got ${dataPoint ? dataPoint.value : 'undefined'}`
        );
    });
});

### Check to-date excludes earlier points - and absence of from-date includes all later points
GET http://localhost:5144/indicators/94063/data?area_codes=D82017&area_codes=D82023&area_codes=D82024&area_codes=D82040&area_codes=D82060&to_date=2024-04-04
> {%
client.test("Check to-date excludes earlier points - and absence of from-date includes all later points", function (callbackfn, thisArg) {
    client.assert(response.status === 200, "Response status is not 200");
    const expectedResults = [ 
        {areaName:"Trinity & Bowthorpe Medical Practice", from:"2022-04-06", sex:"Female", value:65.0943396226415},  
        {areaName:"Roundwell Medical Centre", from:"2022-04-06", sex:"Female", value: 72.7626459143969},  
        {areaName:"Taverham Surgery", from:"2022-04-06", sex:"Female", value: 77.2277227722772},  
        {areaName:"Wensum Valley Medical Practice", from:"2022-04-06", sex:"Female", value: 58.7677725118483},  
        {areaName:"Bacon Road Medical Centre", from:"2022-04-06", sex:"Female", value: 63.0434782608696},  
    ];

    // Count all healthData points in all indicatorSegments for all areas
    const numHealthDataPoints = response.body.areaHealthData
        .map(area => area.indicatorSegment
            .map(segment => segment.healthData.length)
            .reduce((sum, count) => sum + count, 0)
        )
        .reduce((total, count) => total + count, 0);

    client.assert(
        numHealthDataPoints === expectedResults.length,
        `Expected ${expectedResults.length} indicatorSegment health data items, but got ${numHealthDataPoints}`
    );

    expectedResults.forEach((expected) => {
        const area = response.body.areaHealthData.find(area => area.areaName === expected.areaName);
        client.assert(area, `Area not found: ${expected.areaName}`);
        const segment = area.indicatorSegment.find(segment => segment.sex.value === expected.sex);
        client.assert(segment, `Segment not found for sex: ${expected.sex} in area: ${expected.areaName}`);
        const dataPoint = segment.healthData.find(dataPoint => dataPoint.datePeriod.from === expected.from);
        client.assert(
            dataPoint && dataPoint.value === expected.value,
            `failed for ${expected.areaName} ${expected.sex} ${expected.from}: expected value ${expected.value}, got ${dataPoint ? dataPoint.value : 'undefined'}`
        );
    });
});
%}


### Check both to-date and from-date work together
GET http://localhost:5144/indicators/94063/data?area_codes=D82017&area_codes=D82023&area_codes=D82024&area_codes=D82040&area_codes=D82060&from_date=2022-04-06&to_date=2024-04-05
> {%
client.test("Check both to-date and from-date work together", function (callbackfn, thisArg) {
    client.assert(response.status === 200, "Response status is not 200");
    const expectedResults = [ 
        {areaName:"Trinity & Bowthorpe Medical Practice", from:"2022-04-06", sex:"Female", value:65.0943396226415},  
        {areaName:"Trinity & Bowthorpe Medical Practice", from:"2023-04-06", sex:"Female", value: 65.4205607476636},  
        {areaName:"Roundwell Medical Centre", from:"2022-04-06", sex:"Female", value: 72.7626459143969},  
        {areaName:"Roundwell Medical Centre", from:"2023-04-06", sex:"Female", value: 71.7557251908397},  
        {areaName:"Taverham Surgery", from:"2022-04-06", sex:"Female", value: 77.2277227722772},  
        {areaName:"Taverham Surgery", from:"2023-04-06", sex:"Female", value: 79.7101449275362},  
        {areaName:"Wensum Valley Medical Practice", from:"2022-04-06", sex:"Female", value: 58.7677725118483},  
        {areaName:"Wensum Valley Medical Practice", from:"2023-04-06", sex:"Female", value: 57.6923076923077},  
        {areaName:"Bacon Road Medical Centre", from:"2022-04-06", sex:"Female", value: 63.0434782608696},  
        {areaName:"Bacon Road Medical Centre", from:"2023-04-06", sex:"Female", value: 68.0851063829787},  
    ];

    // Count all healthData points in all indicatorSegments for all areas
    const numHealthDataPoints = response.body.areaHealthData
        .map(area => area.indicatorSegment
            .map(segment => segment.healthData.length)
            .reduce((sum, count) => sum + count, 0)
        )
        .reduce((total, count) => total + count, 0);

    client.assert(
        numHealthDataPoints === expectedResults.length,
        `Expected ${expectedResults.length} indicatorSegment health data items, but got ${numHealthDataPoints}`
    );

    expectedResults.forEach((expected) => {
        const area = response.body.areaHealthData.find(area => area.areaName === expected.areaName);
        client.assert(area, `Area not found: ${expected.areaName}`);
        const segment = area.indicatorSegment.find(segment => segment.sex.value === expected.sex);
        client.assert(segment, `Segment not found for sex: ${expected.sex} in area: ${expected.areaName}`);
        const dataPoint = segment.healthData.find(dataPoint => dataPoint.datePeriod.from === expected.from);
        client.assert(
            dataPoint && dataPoint.value === expected.value,
            `failed for ${expected.areaName} ${expected.sex} ${expected.from}: expected value ${expected.value}, got ${dataPoint ? dataPoint.value : 'undefined'}`
        );
    });
    });
%}


### Check both Dates work together excluding everything
GET http://localhost:5144/indicators/94063/data?area_codes=D82017&area_codes=D82023&area_codes=D82024&area_codes=D82040&area_codes=D82060&from_date=2022-04-07&to_date=2024-04-04
> {%
    client.test("Check both Dates work together excluding everything", function (callbackfn, thisArg) {
        client.assert(response.status === 200, "Response status is not 200");
        const expectedResults = [];

        // Count all healthData points in all indicatorSegments for all areas
        const numHealthDataPoints = response.body.areaHealthData
            .map(area => area.indicatorSegment
                .map(segment => segment.healthData.length)
                .reduce((sum, count) => sum + count, 0)
            )
            .reduce((total, count) => total + count, 0);

        client.assert(
            numHealthDataPoints === expectedResults.length,
            `Expected ${expectedResults.length} indicatorSegment health data items, but got ${numHealthDataPoints}`
        );
    });
%}

