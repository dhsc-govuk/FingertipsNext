
### GET health data with deprivation inequality
GET http://localhost:5144/indicators/22401/data?area_codes=E92000001&from_date=2016-04-01&to_date=2017-03-31&inequalities=deprivation

> {%
    client.test("Expected health data returned with deprivation inequalities breakdown", function (callbackfn, thisArg) {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.areaHealthData.length == 1, "HealthData doesn't contain a single area");
        client.assert(response.body.areaHealthData[0].indicatorSegments[0].healthData.length == 21, "HealthData doesn't contain twenty-one records");

        const expectedResults = [
            { sequence: 10, value: "Most deprived decile",
            type: "Counties and Unitary Authorities deprivation deciles: Apr 2023 geography (Index of Multiple Deprivation 2019)", deprivationIsAggregate: false, isAggregate: false },
            { sequence: 9, value: "Second most deprived decile",
            type: "Counties and Unitary Authorities deprivation deciles: Apr 2023 geography (Index of Multiple Deprivation 2019)", deprivationIsAggregate: false, isAggregate: false },
            { sequence: 8, value: "Third more deprived decile",
            type: "Counties and Unitary Authorities deprivation deciles: Apr 2023 geography (Index of Multiple Deprivation 2019)", deprivationIsAggregate: false, isAggregate: false },
            { sequence: 7, value: "Fourth more deprived decile",
            type: "Counties and Unitary Authorities deprivation deciles: Apr 2023 geography (Index of Multiple Deprivation 2019)", deprivationIsAggregate: false, isAggregate: false },
            { sequence: 6, value: "Fifth more deprived decile",
            type: "Counties and Unitary Authorities deprivation deciles: Apr 2023 geography (Index of Multiple Deprivation 2019)", deprivationIsAggregate: false, isAggregate: false },
            { sequence: 5, value: "Fifth less deprived decile",
            type: "Counties and Unitary Authorities deprivation deciles: Apr 2023 geography (Index of Multiple Deprivation 2019)", deprivationIsAggregate: false, isAggregate: false },
            { sequence: 4, value: "Fourth less deprived decile",
            type: "Counties and Unitary Authorities deprivation deciles: Apr 2023 geography (Index of Multiple Deprivation 2019)", deprivationIsAggregate: false, isAggregate: false },
            { sequence: 3, value: "Third less deprived decile",
            type: "Counties and Unitary Authorities deprivation deciles: Apr 2023 geography (Index of Multiple Deprivation 2019)", deprivationIsAggregate: false, isAggregate: false },
            { sequence: 2, value: "Second least deprived decile",
            type: "Counties and Unitary Authorities deprivation deciles: Apr 2023 geography (Index of Multiple Deprivation 2019)", deprivationIsAggregate: false, isAggregate: false },
            { sequence: 1, value: "Least deprived decile",
            type: "Counties and Unitary Authorities deprivation deciles: Apr 2023 geography (Index of Multiple Deprivation 2019)", deprivationIsAggregate: false, isAggregate: false },

            { sequence: 10, value: "Most deprived decile",
            type: "Districts and Unitary Authorities deprivation deciles: Apr 2023 geography (Index of Multiple Deprivation 2019)", deprivationIsAggregate: false, isAggregate: false },
            { sequence: 9, value: "Second most deprived decile",
            type: "Districts and Unitary Authorities deprivation deciles: Apr 2023 geography (Index of Multiple Deprivation 2019)", deprivationIsAggregate: false, isAggregate: false },
            { sequence: 8, value: "Third more deprived decile",
            type: "Districts and Unitary Authorities deprivation deciles: Apr 2023 geography (Index of Multiple Deprivation 2019)", deprivationIsAggregate: false, isAggregate: false },
            { sequence: 7, value: "Fourth more deprived decile",
            type: "Districts and Unitary Authorities deprivation deciles: Apr 2023 geography (Index of Multiple Deprivation 2019)", deprivationIsAggregate: false, isAggregate: false },
            { sequence: 6, value: "Fifth more deprived decile",
            type: "Districts and Unitary Authorities deprivation deciles: Apr 2023 geography (Index of Multiple Deprivation 2019)", deprivationIsAggregate: false, isAggregate: false },
            { sequence: 5, value: "Fifth less deprived decile",
            type: "Districts and Unitary Authorities deprivation deciles: Apr 2023 geography (Index of Multiple Deprivation 2019)", deprivationIsAggregate: false, isAggregate: false },
            { sequence: 4, value: "Fourth less deprived decile",
            type: "Districts and Unitary Authorities deprivation deciles: Apr 2023 geography (Index of Multiple Deprivation 2019)", deprivationIsAggregate: false, isAggregate: false },
            { sequence: 3, value: "Third less deprived decile",
            type: "Districts and Unitary Authorities deprivation deciles: Apr 2023 geography (Index of Multiple Deprivation 2019)", deprivationIsAggregate: false, isAggregate: false },
            { sequence: 2, value: "Second least deprived decile",
            type: "Districts and Unitary Authorities deprivation deciles: Apr 2023 geography (Index of Multiple Deprivation 2019)", deprivationIsAggregate: false, isAggregate: false },
            { sequence: 1, value: "Least deprived decile",
            type: "Districts and Unitary Authorities deprivation deciles: Apr 2023 geography (Index of Multiple Deprivation 2019)", deprivationIsAggregate: false, isAggregate: false },

            { sequence: 11, value: "Persons", type: "Persons", deprivationIsAggregate: true, isAggregate: true },
        ];

        expectedResults.forEach((expected) => {
             client.assert(
                response.body.areaHealthData[0].indicatorSegments.find(segment => segment.isAggregate === expected.isAggregate)     
                .healthData.find(dataPoint => dataPoint.deprivation.sequence === expected.sequence
                                              && dataPoint.deprivation.value === expected.value
                                              && dataPoint.deprivation.type === expected.type
                                              && dataPoint.deprivation.isAggregate === expected.deprivationIsAggregate
                                              && dataPoint.isAggregate === expected.isAggregate
                                ),
                `HealthData doesn't contain a deprivation.sequence ${expected.sequence}, deprivation.value ${expected.value}, deprivation.type ${expected.type}, deprivation.isAggregate ${expected.deprivationIsAggregate} and isAggregate ${expected.isAggregate}`
            );
        });
    });
%}

### GET health data with sex inequality
GET http://localhost:5144/indicators/22401/data?area_codes=E92000001&inequalities=sex&from_date=2016-04-01&to_date=2017-03-31

> {%
    client.test("Expected health data returned with sex inequalities breakdown", function (callbackfn, thisArg) {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.areaHealthData.length == 1, "HealthData doesn't contain a single area");

        areaHealthData = response.body.areaHealthData[0];
        client.assert(areaHealthData.indicatorSegments.length == 3, "HealthData doesn't contain three records");

        const expectedResults = [
            {value: "Persons", isAggregate: true},
            {value: "Male", isAggregate: false},
            {value: "Female", isAggregate: false},
        ];

        expectedResults.forEach((expected) => {
             client.assert(
                areaHealthData.indicatorSegments.find(segment => segment.sex.value === expected.value && segment.isAggregate === expected.isAggregate)
                .healthData.length == 1,
                `HealthData doesn't contain a sex with value ${expected.value} and isAggregate ${expected.isAggregate}`
            );
        });
    });
%}

### GET health data with age inequality
GET http://localhost:5144/indicators/92708/data?area_codes=E92000001&inequalities=age&from_date=2016-01-01&to_date=2016-12-31

> {%
    client.test("Expected health data returned with age inequalities breakdown", function (callbackfn, thisArg) {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.areaHealthData.length == 1, "HealthData doesn't contain a single area");
        areaHealthData = response.body.areaHealthData[0];
        client.assert(areaHealthData.indicatorSegments.length == 60, `Expected 60 segments, found ${areaHealthData.indicatorSegments.length}`);

        const expectedResults = [
            {value: "All ages", ageIsAggregate: true, isAggregate: true},
            {value: "0-4 yrs", ageIsAggregate: false, isAggregate: false},
            {value: "5-9 yrs", ageIsAggregate: false, isAggregate: false},
            {value: "10-14 yrs", ageIsAggregate: false, isAggregate: false},
            {value: "15-19 yrs", ageIsAggregate: false, isAggregate: false},
            {value: "20-24 yrs", ageIsAggregate: false, isAggregate: false},
            {value: "25-29 yrs", ageIsAggregate: false, isAggregate: false},
            {value: "30-34 yrs", ageIsAggregate: false, isAggregate: false},
            {value: "35-39 yrs", ageIsAggregate: false, isAggregate: false},
            {value: "40-44 yrs", ageIsAggregate: false, isAggregate: false},
            {value: "45-49 yrs", ageIsAggregate: false, isAggregate: false},
            {value: "50-54 yrs", ageIsAggregate: false, isAggregate: false},
            {value: "55-59 yrs", ageIsAggregate: false, isAggregate: false},
            {value: "60-64 yrs", ageIsAggregate: false, isAggregate: false},
            {value: "65-69 yrs", ageIsAggregate: false, isAggregate: false},
            {value: "70-74 yrs", ageIsAggregate: false, isAggregate: false},
            {value: "75-79 yrs", ageIsAggregate: false, isAggregate: false},
            {value: "80-84 yrs", ageIsAggregate: false, isAggregate: false},
            {value: "85-89 yrs", ageIsAggregate: false, isAggregate: false},
            {value: "90+ yrs", ageIsAggregate: false, isAggregate: false},
        ];

        expectedResults.forEach((expected) => {
             client.assert(
                areaHealthData.indicatorSegments.find(segment => segment.age.value === expected.value && segment.isAggregate === expected.isAggregate)
                ?.healthData.length == 1,
                `HealthData doesn't contain an age.value ${expected.value}, age.isAggregate ${expected.ageIsAggregate} and isAggregate ${expected.isAggregate}`
            );
        });
    });
%}



### GET inequality for when there is no 'aggregate' data available - check benchmarkComparison is null
GET http://localhost:5144/indicators/90362/data?area_codes=E92000001&area_type=england&inequalities=sex&inequalities=deprivation 
> {%
    client.test("Expected health data returned with sex inequalities breakdown", function (callbackfn, thisArg) {
        client.assert(response.status === 200, "Response status is not 200");

        response.body.areaHealthData[0].indicatorSegments[0].healthData.forEach((dataPoint) => {
             client.assert(
               dataPoint.benchmarkComparison === null,
                `HealthData expected to have null benchmarkComparison, but found ${dataPoint.benchmarkComparison}`
            );
        });
    });
%}