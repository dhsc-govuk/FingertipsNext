### check GET health data with rag comparison

GET http://localhost:5144/indicators/41101/data?area_codes=E12000007

> {%
    const expected = require ('./test-indicators-benchmark-rag_expected-response.json');

    client.test("Expected health data returned with rag comparison", function (callbackfn, thisArg) {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.length === expected.length, "Response length does not match");
        client.assert(JSON.stringify(response.body) === JSON.stringify(expected), "Response body does not match");
    });
%}

###

### GET health data with rag and sex inequalities
GET http://localhost:5144/indicators/41101/data?area_codes=E12000007&inequalities=sex

> {%
    const expected = require ('./test-indicators-benchmark-rag-sex_expected-response.json');
    client.test("Expected health data returned with rag comparison for sex inequality", function (callbackfn, thisArg) {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.areaHealthData.length === expected.areaHealthData.length, "Response length does not match");

        // The ordering keeps changing so making it more stable by iterating through expected results
        expected.areaHealthData.forEach((area) => {
            const responseArea = response.body.areaHealthData.find((rspArea) => rspArea.areaCode === area.areaCode);
            client.assert(area.healthData.length === responseArea.healthData.length, `Area ${area.areaCode} expected to have ${area.healthData.length} but has ${responseArea.healthData.length}`);
            client.assert(responseArea, `Could not find matching response Area ${area.areaCode}`);
            area.healthData.forEach((dataPoint)=> {
                const responseDataPoint = responseArea.healthData.find((rspData) => ((rspData.year === dataPoint.year) && (rspData.sex.value === dataPoint.sex.value)));
                client.assert(responseDataPoint, `Could not find matching data point ${area.areaCode} : ${dataPoint.year} : ${dataPoint.sex}`);
                client.assert(JSON.stringify(dataPoint) === JSON.stringify(responseDataPoint), `${JSON.stringify(dataPoint)} ${JSON.stringify(responseDataPoint)}`);
            })
        })
    });
%}



### check GET health data with rag comparison benchmarked against areaGroup
GET http://localhost:5144/indicators/94063/data?area_codes=N85008&ancestor_code=U79121&benchmark_ref_type=SubNational

> {%
    client.test("Check Get Health Data response when benchmarking against areaGroup", function (callbackfn, thisArg) {
        client.assert(response.status === 200, "Response status is not 200");
            const expectedResults = [ 
                {areaName:"West Wirral Group Practice", year:2022, outcome:"Similar", benchmarkArea:"U79121", benchmarkAreaName:"Healthier West Wirral PCN", benchmarkValue:74.4345081536034},  
                {areaName:"West Wirral Group Practice", year:2023, outcome:"Similar", benchmarkArea:"U79121", benchmarkAreaName:"Healthier West Wirral PCN", benchmarkValue:76.4550264550265}                 ];

            expectedResults.forEach((expected) => {
                client.assert(
                    response.body.areaHealthData.find(area => area.areaName === expected.areaName)
                    .healthData.find(dataPoint => dataPoint.year === expected.year)
                    .benchmarkComparison.outcome === expected.outcome,
                    `failed for ${expected.areaName}`
                );
                client.assert(
                    response.body.areaHealthData.find(area => area.areaName === expected.areaName)
                    .healthData.find(dataPoint => dataPoint.year === expected.year)
                    .benchmarkComparison.benchmarkAreaCode === expected.benchmarkArea,
                    `failed for ${expected.areaName}`
                );
                client.assert(
                    response.body.areaHealthData.find(area => area.areaName === expected.areaName)
                    .healthData.find(dataPoint => dataPoint.year === expected.year)
                    .benchmarkComparison.benchmarkAreaName === expected.benchmarkAreaName,
                    `failed for ${expected.areaName}`
                );
                client.assert(
                    response.body.areaHealthData.find(area => area.areaName === expected.areaName)
                    .healthData.find(dataPoint => dataPoint.year === expected.year)
                    .benchmarkComparison.benchmarkValue === expected.benchmarkValue,
                    `failed for ${expected.areaName}`
                );           
            });

    });
%}




### check GET health data with rag comparison benchmarked against two areaGroups
GET http://localhost:5144/indicators/94063/data?area_codes=D82017&area_codes=D82023&area_codes=D82024&area_codes=D82040&area_codes=D82060&ancestor_code=U00000&benchmark_ref_type=SubNational
> {%
    client.test("Check Get Health Data response when benchmarking against areaGroup", function (callbackfn, thisArg) {
        client.assert(response.status === 200, "Response status is not 200");
            const expectedResults = [ 
                {areaName:"Trinity & Bowthorpe Medical Practice", year:2022, outcome:"Lower", benchmarkArea:"U00000", benchmarkAreaName:"West Norwich PCN", benchmarkValue:68.010752688172},  
                {areaName:"Trinity & Bowthorpe Medical Practice", year:2023, outcome:"Lower", benchmarkArea:"U00000", benchmarkAreaName:"West Norwich PCN", benchmarkValue:68.904593639576},  
                {areaName:"Roundwell Medical Centre", year:2022, outcome:"Higher", benchmarkArea:"U00000", benchmarkAreaName:"West Norwich PCN", benchmarkValue:68.010752688172},  
                {areaName:"Roundwell Medical Centre", year:2023, outcome:"Higher", benchmarkArea:"U00000", benchmarkAreaName:"West Norwich PCN", benchmarkValue:68.904593639576},  
                {areaName:"Taverham Surgery", year:2022, outcome:"Higher", benchmarkArea:"U00000", benchmarkAreaName:"West Norwich PCN", benchmarkValue:68.010752688172},  
                {areaName:"Taverham Surgery", year:2023, outcome:"Higher", benchmarkArea:"U00000", benchmarkAreaName:"West Norwich PCN", benchmarkValue:68.904593639576},  
                {areaName:"Wensum Valley Medical Practice", year:2022, outcome:"Lower", benchmarkArea:"U00000", benchmarkAreaName:"West Norwich PCN", benchmarkValue:68.010752688172},  
                {areaName:"Wensum Valley Medical Practice", year:2023, outcome:"Lower", benchmarkArea:"U00000", benchmarkAreaName:"West Norwich PCN", benchmarkValue:68.904593639576},  
                {areaName:"Bacon Road Medical Centre", year:2022, outcome:"Lower", benchmarkArea:"U00000", benchmarkAreaName:"West Norwich PCN", benchmarkValue:68.010752688172},  
                {areaName:"Bacon Road Medical Centre", year:2023, outcome:"Similar", benchmarkArea:"U00000", benchmarkAreaName:"West Norwich PCN", benchmarkValue:68.904593639576},  
                ];

            expectedResults.forEach((expected) => {
                client.assert(
                    response.body.areaHealthData.find(area => area.areaName === expected.areaName)
                    .healthData.find(dataPoint => dataPoint.year === expected.year)
                    .benchmarkComparison.outcome === expected.outcome,
                    `failed for ${expected.areaName} outcome`
                );
                client.assert(
                    response.body.areaHealthData.find(area => area.areaName === expected.areaName)
                    .healthData.find(dataPoint => dataPoint.year === expected.year)
                    .benchmarkComparison.benchmarkAreaCode === expected.benchmarkArea,
                    `failed for ${expected.areaName} benchmarkArea`
                );
                client.assert(
                    response.body.areaHealthData.find(area => area.areaName === expected.areaName)
                    .healthData.find(dataPoint => dataPoint.year === expected.year)
                    .benchmarkComparison.benchmarkAreaName === expected.benchmarkAreaName,
                    `failed for ${expected.areaName} benchmarkAreaName`
                );
                // TODO: DHSCFT-725 fix this
                client.assert(
                    response.body.areaHealthData.find(area => area.areaName === expected.areaName)
                    .healthData.find(dataPoint => dataPoint.year === expected.year)
                    .benchmarkComparison.benchmarkValue === expected.benchmarkValue,
                    `failed for ${expected.areaName} benchmarkValue`
                );           
            });
    });
%}


### check GET health data with rag comparison benchmarked against areaGroup which is not immediate ancestor of the area
GET http://localhost:5144/indicators/93085/data?area_codes=E54000008&area_codes=E54000057
> {%
    client.test("Check Get Health Data response when benchmarking against areaGroup", function (callbackfn, thisArg) {
        client.assert(response.status === 200, "Response status is not 200");
            const expectedResults = [ 
                {areaName:"NHS Cheshire and Merseyside Integrated Care Board - QYG", year:2022, outcome:"Worse", benchmarkArea:"E92000001", benchmarkAreaName:"England", benchmarkValue:8.8},  
                {areaName:"NHS Greater Manchester Integrated Care Board - QOP", year:2023, outcome:"Similar", benchmarkArea:"E92000001", benchmarkAreaName:"England", benchmarkValue:7.4}                 ];

            expectedResults.forEach((expected) => {
                client.assert(
                    response.body.areaHealthData.find(area => area.areaName === expected.areaName)
                    .healthData.find(dataPoint => dataPoint.year === expected.year)
                    .benchmarkComparison.outcome === expected.outcome,
                    `failed for ${expected.areaName}`
                );
                client.assert(
                    response.body.areaHealthData.find(area => area.areaName === expected.areaName)
                    .healthData.find(dataPoint => dataPoint.year === expected.year)
                    .benchmarkComparison.benchmarkAreaCode === expected.benchmarkArea,
                    `failed for ${expected.areaName}`
                );
                client.assert(
                    response.body.areaHealthData.find(area => area.areaName === expected.areaName)
                    .healthData.find(dataPoint => dataPoint.year === expected.year)
                    .benchmarkComparison.benchmarkAreaName === expected.benchmarkAreaName,
                    `failed for ${expected.areaName}`
                );
                client.assert(
                    response.body.areaHealthData.find(area => area.areaName === expected.areaName)
                    .healthData.find(dataPoint => dataPoint.year === expected.year)
                    .benchmarkComparison.benchmarkValue === expected.benchmarkValue,
                    `failed for ${expected.areaName}`
                );           
            });

    });
%}

### Check GET health data with bad benchmark_ref_type
GET http://localhost:5144/indicators/94063/data?area_codes=N85008&ancestor_code=U79121&benchmark_ref_type=UnknownType
> {%
    client.test("Check error response for invalid benchmark_ref_type", function (callbackfn, thisArg) {
        client.assert(response.status === 400, "Response status is not 400");

    });
%}

### Check GET health data with missing ancestor_code
GET http://localhost:5144/indicators/94063/data?area_codes=N85008&benchmark_ref_type=SubNational
> {%
    client.test("Check error response for missing ancestor_code", function (callbackfn, thisArg) {
        client.assert(response.status === 400, "Response status is not 400");
    });
%}

### Check GET health data with ancestor_code which is not an ancestor of the area - this is not a requirement but for this implementation will work.
GET http://localhost:5144/indicators/94063/data?area_codes=N85008&ancestor_code=E38000205&benchmark_ref_type=SubNational
> {%
    client.test("Check error response for ancestor_code NOT an ancestor of the areas", function (callbackfn, thisArg) {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Check we are getting the correct data for England
GET http://localhost:5144/indicators/383/data?area_codes=E92000001&area_type=england&benchmark_ref_type=England&latest_only=false
> {%
        client.test("Check we are getting the correct data for England", () => {
            const expectedResults = [ 
                {areaName:"England", from:"2012-01-01", value:0.568661614775663},
                {areaName:"England", from:"2013-01-01", value:0.5169052},
                {areaName:"England", from:"2014-01-01", value:0.556408625061949},
                {areaName:"England", from:"2015-01-01", value:1.03245374052936},
                {areaName:"England", from:"2016-01-01", value:0.602373421846305},
                {areaName:"England", from:"2017-01-01", value:0.633407092721309},
                {areaName:"England", from:"2018-01-01", value:0.629991351541638},
                {areaName:"England", from:"2019-01-01", value:0.649879406896621},
                {areaName:"England", from:"2020-01-01", value:0.639274606519187},
                {areaName:"England", from:"2021-01-01", value:0.563986295990208},
                {areaName:"England", from:"2022-01-01", value:0.60998466767936},
                {areaName:"England", from:"2023-01-01", value:0.6638},
                {areaName:"England", from:"2024-01-01", value:0.53075},
                ];

                
        var numHealthDataPoints = response.body.areaHealthData.map(area => area.healthData.length).reduce((partialSum, b) => partialSum + b, 0);
        client.assert(
            numHealthDataPoints === expectedResults.length,
            `Expected ${expectedResults.length} area health data items, but got ${numHealthDataPoints}`
        );

        expectedResults.forEach((expected) => {
            client.assert(
                response.body.areaHealthData.find(area => area.areaName === expected.areaName)
                .healthData.find(dataPoint => dataPoint.datePeriod.from === expected.from)
                .value === expected.value,
                `failed for ${expected.areaName} ${expected.from} ${expected.outcome}`
            );
        });
    });
%}

### A massive request to check performance
GET http://localhost:5144/indicators/91894/data?area_type=nhs-sub-integrated-care-boards&ancestor_code=E92000001&area_codes=E38000006&area_codes=E38000007&area_codes=E38000008&area_codes=E38000014&area_codes=E38000015&area_codes=E38000016&area_codes=E38000021&area_codes=E38000024&area_codes=E38000025&area_codes=E38000028&area_codes=E38000030&area_codes=E38000034&area_codes=E38000044&area_codes=E38000045&area_codes=E38000049&area_codes=E38000050&area_codes=E38000051&area_codes=E38000052&area_codes=E38000053&area_codes=E38000062&area_codes=E38000068&area_codes=E38000079&area_codes=E38000080&area_codes=E38000085&area_codes=E38000086&area_codes=E38000089&area_codes=E38000091&area_codes=E38000097&area_codes=E38000101&area_codes=E38000106&area_codes=E38000117&area_codes=E3800119&area_codes=E38000122&area_codes=E38000126&area_codes=E38000127&area_codes=E38000130&area_codes=E38000135&area_codes=E38000136&area_codes=E38000137&area_codes=E38000141&area_codes=E38000143&area_codes=E38000146&area_codes=E38000150&area_codes=E38000153&area_codes=E38000161&area_codes=E38000163&area_codes=E38000168&area_codes=E38000170

