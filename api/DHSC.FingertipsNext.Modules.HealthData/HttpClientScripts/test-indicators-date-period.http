
### Check from Date is inclusive
GET http://localhost:5144/indicators/94063/data?area_codes=D82017&area_codes=D82023&area_codes=D82024&area_codes=D82040&area_codes=D82060&from_date=2022-04-06
> {%
    client.test("Check from Date is inclusive", function (callbackfn, thisArg) {
        client.assert(response.status === 200, "Response status is not 200");
            const expectedResults = [ 
                {areaName:"Trinity & Bowthorpe Medical Practice", from:"2022-04-06", value:65.0943396226415},  
                {areaName:"Trinity & Bowthorpe Medical Practice", from:"2023-04-06", value: 65.4205607476636},  
                {areaName:"Roundwell Medical Centre", from:"2022-04-06", value: 72.7626459143969},  
                {areaName:"Roundwell Medical Centre", from:"2023-04-06", value: 71.7557251908397},  
                {areaName:"Taverham Surgery", from:"2022-04-06", value: 77.2277227722772},  
                {areaName:"Taverham Surgery", from:"2023-04-06", value: 79.7101449275362},  
                {areaName:"Wensum Valley Medical Practice", from:"2022-04-06", value: 58.7677725118483},  
                {areaName:"Wensum Valley Medical Practice", from:"2023-04-06", value: 57.6923076923077},  
                {areaName:"Bacon Road Medical Centre", from:"2022-04-06", value: 63.0434782608696},  
                {areaName:"Bacon Road Medical Centre", from:"2023-04-06", value: 68.0851063829787},  
                ];

        var numHealthDataPoints = response.body.areaHealthData.map(area => area.healthData.length).reduce((partialSum, b) => partialSum + b, 0);
        client.assert(
            numHealthDataPoints === expectedResults.length,
            `Expected ${expectedResults.length} area health data items, but got ${numHealthDataPoints}`
        );

        expectedResults.forEach((expected) => {
            client.assert(
                response.body.areaHealthData.find(area => area.areaName === expected.areaName)
                .healthData.find(dataPoint => dataPoint.datePeriod.from === expected.from)
                .value === expected.value,
                `failed for ${expected.areaName} value`
            );
        });
    });
%}



### Check from Date exludes earlier points
GET http://localhost:5144/indicators/94063/data?area_codes=D82017&area_codes=D82023&area_codes=D82024&area_codes=D82040&area_codes=D82060&from_date=2022-04-07
> {%
    client.test("Check from Date exludes earlier points", function (callbackfn, thisArg) {
        client.assert(response.status === 200, "Response status is not 200");
            const expectedResults = [ 
                {areaName:"Trinity & Bowthorpe Medical Practice", from:"2023-04-06", value: 65.4205607476636},  
                {areaName:"Roundwell Medical Centre", from:"2023-04-06", value: 71.7557251908397},  
                {areaName:"Taverham Surgery", from:"2023-04-06", value: 79.7101449275362},  
                {areaName:"Wensum Valley Medical Practice", from:"2023-04-06", value: 57.6923076923077},  
                {areaName:"Bacon Road Medical Centre", from:"2023-04-06", value: 68.0851063829787},  
                ];

        var numHealthDataPoints = response.body.areaHealthData.map(area => area.healthData.length).reduce((partialSum, b) => partialSum + b, 0);
        client.assert(
            numHealthDataPoints === expectedResults.length,
            `Expected ${expectedResults.length} area health data items, but got ${numHealthDataPoints}`
        );

        expectedResults.forEach((expected) => {
            client.assert(
                response.body.areaHealthData.find(area => area.areaName === expected.areaName)
                .healthData.find(dataPoint => dataPoint.datePeriod.from === expected.from)
                .value === expected.value,
                `failed for ${expected.areaName} value`
            );
        });
    });
%}


### Check to Date is inclusive
GET http://localhost:5144/indicators/94063/data?area_codes=D82017&area_codes=D82023&area_codes=D82024&area_codes=D82040&area_codes=D82060&to_date=2024-04-05
> {%
    client.test("Check to Date is inclusive", function (callbackfn, thisArg) {
        client.assert(response.status === 200, "Response status is not 200");
            const expectedResults = [ 
                {areaName:"Trinity & Bowthorpe Medical Practice", from:"2022-04-06", value:65.0943396226415},  
                {areaName:"Trinity & Bowthorpe Medical Practice", from:"2023-04-06", value: 65.4205607476636},  
                {areaName:"Roundwell Medical Centre", from:"2022-04-06", value: 72.7626459143969},  
                {areaName:"Roundwell Medical Centre", from:"2023-04-06", value: 71.7557251908397},  
                {areaName:"Taverham Surgery", from:"2022-04-06", value: 77.2277227722772},  
                {areaName:"Taverham Surgery", from:"2023-04-06", value: 79.7101449275362},  
                {areaName:"Wensum Valley Medical Practice", from:"2022-04-06", value: 58.7677725118483},  
                {areaName:"Wensum Valley Medical Practice", from:"2023-04-06", value: 57.6923076923077},  
                {areaName:"Bacon Road Medical Centre", from:"2022-04-06", value: 63.0434782608696},  
                {areaName:"Bacon Road Medical Centre", from:"2023-04-06", value: 68.0851063829787},  
                ];

        var numHealthDataPoints = response.body.areaHealthData.map(area => area.healthData.length).reduce((partialSum, b) => partialSum + b, 0);
        client.assert(
            numHealthDataPoints === expectedResults.length,
            `Expected ${expectedResults.length} area health data items, but got ${numHealthDataPoints}`
        );

        expectedResults.forEach((expected) => {
            client.assert(
                response.body.areaHealthData.find(area => area.areaName === expected.areaName)
                .healthData.find(dataPoint => dataPoint.datePeriod.from === expected.from)
                .value === expected.value,
                `failed for ${expected.areaName} value`
            );
        });
    });
%}

### Check to Date excludes earlier points
GET http://localhost:5144/indicators/94063/data?area_codes=D82017&area_codes=D82023&area_codes=D82024&area_codes=D82040&area_codes=D82060&to_date=2024-04-04
> {%
    client.test("Check to Date excludes earlier points", function (callbackfn, thisArg) {
        client.assert(response.status === 200, "Response status is not 200");
            const expectedResults = [ 
                {areaName:"Trinity & Bowthorpe Medical Practice", from:"2022-04-06", value:65.0943396226415},  
                {areaName:"Roundwell Medical Centre", from:"2022-04-06", value: 72.7626459143969},  
                {areaName:"Taverham Surgery", from:"2022-04-06", value: 77.2277227722772},  
                {areaName:"Wensum Valley Medical Practice", from:"2022-04-06", value: 58.7677725118483},  
                {areaName:"Bacon Road Medical Centre", from:"2022-04-06", value: 63.0434782608696},  
                ];

        var numHealthDataPoints = response.body.areaHealthData.map(area => area.healthData.length).reduce((partialSum, b) => partialSum + b, 0);
        client.assert(
            numHealthDataPoints === expectedResults.length,
            `Expected ${expectedResults.length} area health data items, but got ${numHealthDataPoints}`
        );

        expectedResults.forEach((expected) => {
            client.assert(
                response.body.areaHealthData.find(area => area.areaName === expected.areaName)
                .healthData.find(dataPoint => dataPoint.datePeriod.from === expected.from)
                .value === expected.value,
                `failed for ${expected.areaName} value`
            );
        });
    });
%}


### Check both Dates work together
GET http://localhost:5144/indicators/94063/data?area_codes=D82017&area_codes=D82023&area_codes=D82024&area_codes=D82040&area_codes=D82060&from_date=2022-04-06&to_date=2024-04-05
> {%
    client.test("Check both Dates work together", function (callbackfn, thisArg) {
        client.assert(response.status === 200, "Response status is not 200");
            const expectedResults = [ 
                {areaName:"Trinity & Bowthorpe Medical Practice", from:"2022-04-06", value:65.0943396226415},  
                {areaName:"Trinity & Bowthorpe Medical Practice", from:"2023-04-06", value: 65.4205607476636},  
                {areaName:"Roundwell Medical Centre", from:"2022-04-06", value: 72.7626459143969},  
                {areaName:"Roundwell Medical Centre", from:"2023-04-06", value: 71.7557251908397},  
                {areaName:"Taverham Surgery", from:"2022-04-06", value: 77.2277227722772},  
                {areaName:"Taverham Surgery", from:"2023-04-06", value: 79.7101449275362},  
                {areaName:"Wensum Valley Medical Practice", from:"2022-04-06", value: 58.7677725118483},  
                {areaName:"Wensum Valley Medical Practice", from:"2023-04-06", value: 57.6923076923077},  
                {areaName:"Bacon Road Medical Centre", from:"2022-04-06", value: 63.0434782608696},  
                {areaName:"Bacon Road Medical Centre", from:"2023-04-06", value: 68.0851063829787},  
                ];

        var numHealthDataPoints = response.body.areaHealthData.map(area => area.healthData.length).reduce((partialSum, b) => partialSum + b, 0);
        client.assert(
            numHealthDataPoints === expectedResults.length,
            `Expected ${expectedResults.length} area health data items, but got ${numHealthDataPoints}`
        );

        expectedResults.forEach((expected) => {
            client.assert(
                response.body.areaHealthData.find(area => area.areaName === expected.areaName)
                .healthData.find(dataPoint => dataPoint.datePeriod.from === expected.from)
                .value === expected.value,
                `failed for ${expected.areaName} value`
            );
        });
    });
%}

### Check both Dates work together excluding everything
GET http://localhost:5144/indicators/94063/data?area_codes=D82017&area_codes=D82023&area_codes=D82024&area_codes=D82040&area_codes=D82060&from_date=2022-04-07&to_date=2024-04-04
> {%
    client.test("Check both Dates work together excluding everything", function (callbackfn, thisArg) {
        client.assert(response.status === 200, "Response status is not 200");
            const expectedResults = [  ];

        var numHealthDataPoints = response.body.areaHealthData.map(area => area.healthData.length).reduce((partialSum, b) => partialSum + b, 0);
        client.assert(
            numHealthDataPoints === expectedResults.length,
            `Expected ${expectedResults.length} area health data items, but got ${numHealthDataPoints}`
        );

        expectedResults.forEach((expected) => {
            client.assert(
                response.body.areaHealthData.find(area => area.areaName === expected.areaName)
                .healthData.find(dataPoint => dataPoint.datePeriod.from === expected.from)
                .value === expected.value,
                `failed for ${expected.areaName} value`
            );
        });
    });
%}


### Quintiles: Check both to and from Dates work inclusively
GET http://localhost:5144/indicators/90453/data?from_date=2020-01-01&to_date=2023-12-31&area_codes=K84031&area_codes=K84017&area_type=gps&ancestor_code=E38000136&benchmark_ref_type=SubNational

> {%
        client.test("Quintiles: Check both to and from Dates work inclusively", () => {
            const expectedResults = [ 
                {areaName:"The Leys Health Centre", from:"2020-01-01", value:28.5142773147121},
                {areaName:"The Leys Health Centre", from:"2021-01-01", value:25.6137193440141},
                {areaName:"The Leys Health Centre", from:"2022-01-01", value:27.6788790510882},
                {areaName:"The Leys Health Centre", from:"2023-01-01", value: 29.6664},
                {areaName:"Windrush Medical Practice", from:"2020-01-01", value:28.4451817444403},
                {areaName:"Windrush Medical Practice", from:"2021-01-01", value:31.3724810915536},
                {areaName:"Windrush Medical Practice", from:"2022-01-01", value:28.0830820914053},
                {areaName:"Windrush Medical Practice", from:"2023-01-01", value:30.4179},
                ];

                
        var numHealthDataPoints = response.body.areaHealthData.map(area => area.healthData.length).reduce((partialSum, b) => partialSum + b, 0);
        client.assert(
            numHealthDataPoints === expectedResults.length,
            `Expected ${expectedResults.length} area health data items, but got ${numHealthDataPoints}`
        );

        expectedResults.forEach((expected) => {
            client.assert(
                response.body.areaHealthData.find(area => area.areaName === expected.areaName)
                .healthData.find(dataPoint => dataPoint.datePeriod.from === expected.from)
                .value === expected.value,
                `failed for ${expected.areaName} ${expected.from} ${expected.outcome}`
            );
        });
    });
%}


### Quintiles: Check both to and from Dates work inclusively
GET http://localhost:5144/indicators/90453/data?from_date=2020-01-02&to_date=2023-12-30&area_codes=K84031&area_codes=K84017&area_type=gps&ancestor_code=E38000136&benchmark_ref_type=SubNational

> {%
        client.test("Quintiles: Check both to and from Dates work inclusively", () => {
            const expectedResults = [ 
                {areaName:"The Leys Health Centre", from:"2021-01-01", value:25.6137193440141},
                {areaName:"The Leys Health Centre", from:"2022-01-01", value:27.6788790510882},
                {areaName:"Windrush Medical Practice", from:"2021-01-01", value:31.3724810915536},
                {areaName:"Windrush Medical Practice", from:"2022-01-01", value:28.0830820914053},
                ];

                
        var numHealthDataPoints = response.body.areaHealthData.map(area => area.healthData.length).reduce((partialSum, b) => partialSum + b, 0);
        client.assert(
            numHealthDataPoints === expectedResults.length,
            `Expected ${expectedResults.length} area health data items, but got ${numHealthDataPoints}`
        );

        expectedResults.forEach((expected) => {
            client.assert(
                response.body.areaHealthData.find(area => area.areaName === expected.areaName)
                .healthData.find(dataPoint => dataPoint.datePeriod.from === expected.from)
                .value === expected.value,
                `failed for ${expected.areaName} ${expected.from} ${expected.outcome}`
            );
        });
    });
%}


### Quintiles: Check with no toDate
GET http://localhost:5144/indicators/90453/data?from_date=2020-01-01&area_codes=K84031&area_codes=K84017&area_type=gps&ancestor_code=E38000136&benchmark_ref_type=SubNational
> {%
        client.test("Quintiles: Check with no toDate", () => {
            const expectedResults = [ 
                {areaName:"The Leys Health Centre", from:"2020-01-01", value:28.5142773147121},
                {areaName:"The Leys Health Centre", from:"2021-01-01", value:25.6137193440141},
                {areaName:"The Leys Health Centre", from:"2022-01-01", value:27.6788790510882},
                {areaName:"The Leys Health Centre", from:"2023-01-01", value: 29.6664},
                {areaName:"The Leys Health Centre", from:"2024-01-01", value: 25.01118},
                {areaName:"Windrush Medical Practice", from:"2020-01-01", value:28.4451817444403},
                {areaName:"Windrush Medical Practice", from:"2021-01-01", value:31.3724810915536},
                {areaName:"Windrush Medical Practice", from:"2022-01-01", value:28.0830820914053},
                {areaName:"Windrush Medical Practice", from:"2023-01-01", value:30.4179},
                {areaName:"Windrush Medical Practice", from:"2024-01-01", value:22.6251},
                ];
                
        var numHealthDataPoints = response.body.areaHealthData.map(area => area.healthData.length).reduce((partialSum, b) => partialSum + b, 0);
        client.assert(
            numHealthDataPoints === expectedResults.length,
            `Expected ${expectedResults.length} area health data items, but got ${numHealthDataPoints}`
        );

        expectedResults.forEach((expected) => {
            client.assert(
                response.body.areaHealthData.find(area => area.areaName === expected.areaName)
                .healthData.find(dataPoint => dataPoint.datePeriod.from === expected.from)
                .value === expected.value,
                `failed for ${expected.areaName} ${expected.from} ${expected.outcome}`
            );
        });
    });
%}

### Check both Dates work together excluding everything
GET http://localhost:5144/indicators/94063/data?area_codes=D82017&area_codes=D82023&area_codes=D82024&area_codes=D82040&area_codes=D82060&from_date=2022-04-07&to_date=2024-04-04
> {%
    client.test("Check both Dates work together excluding everything", function (callbackfn, thisArg) {
        client.assert(response.status === 200, "Response status is not 200");
            const expectedResults = [  ];

        var numHealthDataPoints = response.body.areaHealthData.map(area => area.healthData.length).reduce((partialSum, b) => partialSum + b, 0);
        client.assert(
            numHealthDataPoints === expectedResults.length,
            `Expected ${expectedResults.length} area health data items, but got ${numHealthDataPoints}`
        );

        expectedResults.forEach((expected) => {
            client.assert(
                response.body.areaHealthData.find(area => area.areaName === expected.areaName)
                .healthData.find(dataPoint => dataPoint.datePeriod.from === expected.from)
                .value === expected.value,
                `failed for ${expected.areaName} value`
            );
        });
    });
%}

### Quintiles: Check with no fromDate
GET http://localhost:5144/indicators/90453/data?to_date=2023-12-31&area_codes=K84031&area_codes=K84017&area_type=gps&ancestor_code=E38000136&benchmark_ref_type=SubNational
> {%
        client.test("Quintiles: Check with no fromDate", () => {
            const expectedResults = [ 
                {areaName:"The Leys Health Centre", from:"2013-01-01", value:27.018263139165},
                {areaName:"The Leys Health Centre", from:"2020-01-01", value:28.5142773147121},
                {areaName:"The Leys Health Centre", from:"2021-01-01", value:25.6137193440141},
                {areaName:"The Leys Health Centre", from:"2022-01-01", value:27.6788790510882},
                {areaName:"The Leys Health Centre", from:"2023-01-01", value: 29.6664},
                {areaName:"Windrush Medical Practice", from:"2013-01-01", value:34.2085902879252},
                {areaName:"Windrush Medical Practice", from:"2020-01-01", value:28.4451817444403},
                {areaName:"Windrush Medical Practice", from:"2021-01-01", value:31.3724810915536},
                {areaName:"Windrush Medical Practice", from:"2022-01-01", value:28.0830820914053},
                {areaName:"Windrush Medical Practice", from:"2023-01-01", value:30.4179},
                ];

                
        var numHealthDataPoints = response.body.areaHealthData.map(area => area.healthData.length).reduce((partialSum, b) => partialSum + b, 0);
        client.assert(
            numHealthDataPoints === 22,
            `Expected 22 area health data items, but got ${numHealthDataPoints}`
        );

        expectedResults.forEach((expected) => {
            client.assert(
                response.body.areaHealthData.find(area => area.areaName === expected.areaName)
                .healthData.find(dataPoint => dataPoint.datePeriod.from === expected.from)
                .value === expected.value,
                `failed for ${expected.areaName} ${expected.from} ${expected.outcome}`
            );
        });
    });
%}

### check invalid date format
GET http://localhost:5144/indicators/94103/data?from_date=invalid&area_codes=E09000027&area_type=counties-and-unitary-authorities

> {%
    client.test("Expected health data returned with rag comparison", function (callbackfn, thisArg) {
       client.assert(response.status === 400, "Response status is not 400");
       const expected = {
            "message": "from_date invalid is invalid, should be formatted like 2023-06-20"
            }
        client.assert(JSON.stringify(response.body) === JSON.stringify(expected), "Response body does not match");
    });
%}

### check invalid date format
GET http://localhost:5144/indicators/94103/data?to_date=invalid&area_codes=E09000027&area_type=counties-and-unitary-authorities

> {%
    client.test("Expected health data returned with rag comparison", function (callbackfn, thisArg) {
       client.assert(response.status === 400, "Response status is not 400");
       const expected = {
            "message": "to_date invalid is invalid, should be formatted like 2023-06-20"
            }
        client.assert(JSON.stringify(response.body) === JSON.stringify(expected), "Response body does not match");
    });
%}