### Check GET health data with bad benchmark_ref_type
GET http://localhost:5144/indicators/94063/data?area_codes=N85008&ancestor_code=U79121&benchmark_ref_type=UnknownType
> {%
    client.test("Check error response for invalid benchmark_ref_type", function (callbackfn, thisArg) {
        client.assert(response.status === 400, "Response status is not 400");

    });
%}

### Check GET health data with missing ancestor_code
GET http://localhost:5144/indicators/94063/data?area_codes=N85008&benchmark_ref_type=SubNational
> {%
    client.test("Check error response for missing ancestor_code", function (callbackfn, thisArg) {
        client.assert(response.status === 400, "Response status is not 400");
    });
%}

### Check GET health data with ancestor_code which is not an ancestor of the area - this is not a requirement but for this implementation will work.
GET http://localhost:5144/indicators/94063/data?area_codes=N85008&ancestor_code=E38000205&benchmark_ref_type=SubNational
> {%
    client.test("Check error response for ancestor_code NOT an ancestor of the areas", function (callbackfn, thisArg) {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### attempt to use indicatorId hardcoded to generate exception
GET http://localhost:5144/Indicators/-1/data
> {%
    client.test("test request for invalid indicatorId", function (callbackfn, thisArg) {
        client.assert(response.status === 404, "Response status is not 404");
    });
%}
###

### attempt to use invalid indicatorId
GET http://localhost:5144/Indicators/sausage/data
> {%
    client.test("test request for invalid indicatorId", function (callbackfn, thisArg) {
        client.assert(response.status === 404, "Response status is not 404");
    });
%}
###

### test request for unsupported areaCode
GET http://localhost:5144/Indicators/108/data
    ?areaCodes=areaCode1
    &years=1970
    &years=1980
    &areaCodes=unknownAreaCode
    &areaCodes=areaCode2
> {%
    client.test("test request for unsupported areaCode", function (callbackfn, thisArg) {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.areaHealthData.length == 0, "areaHealthData not as expected");
    });
%}