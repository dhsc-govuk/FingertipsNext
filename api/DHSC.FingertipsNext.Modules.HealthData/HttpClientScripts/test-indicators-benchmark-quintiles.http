

### check quintile comparison for specific years -- existing site doesn't expose this data to allow us to validate against
GET http://localhost:5144/indicators/383/data?area_codes=A84022&area_type=gps&years=2023&years=2022

> {%
    client.test("Expected health data returned with rag comparison", function (callbackfn, thisArg) {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.areaHealthData[0].healthData.length ==2, "HealthData doesn't contain two records");
        client.assert(response.body.areaHealthData[0].healthData[0].year ==2022, "HealthData doesn't contain two records");
        client.assert(response.body.areaHealthData[0].healthData[1].year ==2023, "HealthData doesn't contain two records");

        client.assert(response.body.areaHealthData[0].indicatorSegments[0].healthData.length ==2, "HealthData doesn't contain two records");
        client.assert(response.body.areaHealthData[0].indicatorSegments[0].healthData[0].datePeriod.from == "2022-01-01", "HealthData doesn't contain two records");
        client.assert(response.body.areaHealthData[0].indicatorSegments[0].healthData[1].datePeriod.from == "2023-01-01", "HealthData doesn't contain two records");
    });
%}

### check quintile comparison for multiple areas
GET http://localhost:5144/indicators/383/data?area_codes=A84022&area_codes=K84031&area_codes=E92000001&area_codes=XXXXXXXX&area_type=gps&years=2023

> {%
    client.test("Expected health data returned with rag comparison", function (callbackfn, thisArg) {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.areaHealthData[0].areaCode =="A84022", "AreaCode not as expected");
        client.assert(response.body.areaHealthData[1].areaCode =="E92000001", "AreaCode not as expected");
        client.assert(response.body.areaHealthData[2].areaCode =="K84031", "AreaCode not as expected");
    });
%}

### check quintile comparison for counties - this makes sure get data for 4 areas - Quintile values have been validated against current site
GET http://localhost:5144/indicators/94103/data?area_codes=E09000027&area_codes=E10000032&area_codes=E10000018&area_codes=E06000062&area_codes=E06000030&area_codes=E06000052&area_codes=E10000020&area_codes=E06000013&area_codes=E06000005&area_codes=E06000009&area_type=counties-and-unitary-authorities&years=2019

> {%
    client.test("Expected health data returned with rag comparison", function (callbackfn, thisArg) {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.areaHealthData.length == 10, "Have not received data for all areas");
    });
%}

### check quintile comparison for districts - this makes sure get data for 3 areas - current site does not return data for this indicator for Districts!
GET http://localhost:5144/indicators/94103/data?area_codes=E08000029&area_codes=E06000005&area_codes=E09000023&area_type=districts-and-unitary-authorities&years=2019

> {%
    client.test("Expected health data returned with rag comparison", function (callbackfn, thisArg) {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.areaHealthData.length == 3, "Have not received data for all areas");
    });
%}

### check High is good TODO - POC data doesn't offer data to validate this

### check No Judgement 
GET http://localhost:5144/indicators/90453/data?area_codes=K84031&area_codes=A84022&area_type=gps&years=2023&years=2022&years=2021&years=2020

> {%
        client.test("received expected health data with quintile comparison", () => {
            const expectedResults = [ 
                {areaName:"Coquet Medical Group", year:"2020-01-01", outcome:"Middle"},
                {areaName:"Coquet Medical Group", year:"2021-01-01", outcome:"Low"},
                {areaName:"Coquet Medical Group", year:"2022-01-01", outcome:"Highest"},
                {areaName:"Coquet Medical Group", year:"2023-01-01", outcome:"Highest"},
                {areaName:"The Leys Health Centre", year:"2020-01-01", outcome:"Middle"},
                {areaName:"The Leys Health Centre", year:"2021-01-01", outcome:"Low"},
                {areaName:"The Leys Health Centre", year:"2022-01-01", outcome:"Middle"},
                {areaName:"The Leys Health Centre", year:"2023-01-01", outcome:"High"},
                ];

            expectedResults.forEach((expected) => {
                client.assert(
                    response.body.areaHealthData.find(area => area.areaName === expected.areaName)
                    .healthData.find(dataPoint => dataPoint.datePeriod.from === expected.year)
                    .benchmarkComparison.outcome === expected.outcome,
                    `failed for ${expected.areaName}`
                );
            });

            expectedResults.forEach((expected) => {
                client.assert(
                    response.body.areaHealthData.find(area => area.areaName === expected.areaName)
                    .indicatorSegments[0]
                    .healthData.find(dataPoint => dataPoint.datePeriod.from === expected.year)
                    .benchmarkComparison.outcome === expected.outcome,
                    `failed for ${expected.areaName}`
                );
            });            
        });
%}


### check Low is good polarity
GET http://localhost:5144/indicators/94103/data?area_codes=E10000014&area_codes=E08000029&area_codes=E06000005&area_codes=E09000023&area_type=counties-and-unitary-authorities&years=2019&years=2018&years=2017&years=2016

> {%
        client.test("received expected health data with quintile comparison", () => {
            const expectedResults = [
                {areaName:"Darlington", year:"2016-01-01", outcome:"Worse"},
                {areaName:"Darlington", year:"2019-01-01", outcome:"Worse"},
                {areaName:"Hampshire", year:"2016-01-01", outcome:"Best"},
                {areaName:"Hampshire", year:"2019-01-01", outcome:"Best"},
                {areaName:"Lewisham", year:"2016-01-01", outcome:"Better"},
                {areaName:"Lewisham", year:"2019-01-01", outcome:"Better"},
                ];

            expectedResults.forEach((expected) => {
                client.assert(
                    response.body.areaHealthData.find(area => area.areaName === expected.areaName)
                    .healthData.find(dataPoint => dataPoint.datePeriod.from === expected.year)
                    .benchmarkComparison.outcome === expected.outcome,
                    `failed for ${expected.areaName}`
                );
            });

            expectedResults.forEach((expected) => {
                client.assert(
                    response.body.areaHealthData.find(area => area.areaName === expected.areaName)
                    .indicatorSegments[0]
                    .healthData.find(dataPoint => dataPoint.datePeriod.from === expected.year)
                    .benchmarkComparison.outcome === expected.outcome,
                    `failed for ${expected.areaName}`
                );
            });
        });
%}


### check quintile comparison for counties - Quintile values have been validated against current site - there are known differences
GET http://localhost:5144/indicators/94103/data?area_codes=E09000027&area_codes=E10000032&area_codes=E10000018&area_codes=E06000062&area_codes=E06000030&area_codes=E06000050&area_type=counties-and-unitary-authorities&years=2019

> {%
    client.test("Expected health data returned with quintile comparison", function (callbackfn, thisArg) {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.areaHealthData.length == 6, "Have not received data for all areas");

        const expectedResults = [ 
            {areaName:"Cheshire West and Chester", year:"2019-01-01", outcome:"Middle"},
            {areaName:"Leicestershire", year:"2019-01-01", outcome:"Better"},
            {areaName:"Richmond upon Thames", year:"2019-01-01", outcome:"Best"},
            {areaName:"Swindon", year:"2019-01-01", outcome:"Better"},
            {areaName:"West Northamptonshire", year:"2019-01-01", outcome:"Better"},
            {areaName:"West Sussex", year:"2019-01-01", outcome:"Best"},
            ];

        expectedResults.forEach((expected) => {
             client.assert(
                response.body.areaHealthData.find(area => area.areaName === expected.areaName)
                .healthData.find(dataPoint => dataPoint.datePeriod.from === expected.year)
                .benchmarkComparison.outcome === expected.outcome,
                `failed for ${expected.areaName}`
            );
        });
        expectedResults.forEach((expected) => {
             client.assert(
                response.body.areaHealthData.find(area => area.areaName === expected.areaName)
                .indicatorSegments[0]
                .healthData.find(dataPoint => dataPoint.datePeriod.from === expected.year)
                .benchmarkComparison.outcome === expected.outcome,
                `failed for ${expected.areaName}`
            );
        });    
    });
%}

### check quintile comparison for counties - Quintile values have been validated against current site - there are known differences
GET http://localhost:5144/indicators/94103/data?area_codes=E06000052&area_codes=E10000020&area_codes=E06000013&area_codes=E06000005&area_codes=E08000001&area_codes=E06000009&area_type=counties-and-unitary-authorities&years=2019

> {%
    client.test("Expected health data returned with quintile comparison", function (callbackfn, thisArg) {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.areaHealthData.length == 6, "Have not received data for all areas");

        const expectedResults = [ 
            {areaName:"Blackpool", year:"2019-01-01", outcome:"Worst"},
            {areaName:"Bolton", year:"2019-01-01", outcome:"Worst"},
            {areaName:"Cornwall", year:"2019-01-01", outcome:"Middle"},
            {areaName:"Darlington", year:"2019-01-01", outcome:"Worse"},
            {areaName:"Norfolk", year:"2019-01-01", outcome:"Worse"},
            {areaName:"North Lincolnshire", year:"2019-01-01", outcome:"Worse"},
            ];

        expectedResults.forEach((expected) => {
             client.assert(
                response.body.areaHealthData.find(area => area.areaName === expected.areaName)
                .healthData.find(dataPoint => dataPoint.datePeriod.from === expected.year)
                .benchmarkComparison.outcome === expected.outcome
            );
        });
        expectedResults.forEach((expected) => {
             client.assert(
                response.body.areaHealthData.find(area => area.areaName === expected.areaName)
                .indicatorSegments[0]
                .healthData.find(dataPoint => dataPoint.datePeriod.from === expected.year)
                .benchmarkComparison.outcome === expected.outcome
            );
        });
    });
%}
### check quintile comparison is unchanged when including multiple years
GET http://localhost:5144/indicators/94103/data?area_codes=E09000027&area_codes=E10000032&area_codes=E10000018&area_codes=E06000062&area_codes=E06000030&area_codes=E06000050&area_type=counties-and-unitary-authorities&years=2019&years=2016

> {%
    client.test("Expected health data returned with quintile comparison", function (callbackfn, thisArg) {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.areaHealthData.length == 6, "Have not received data for all areas");

        const expectedResults = [ 
            {areaName:"Cheshire West and Chester", year:"2019-01-01", outcome:"Middle"},
            {areaName:"Leicestershire", year:"2019-01-01", outcome:"Better"},
            {areaName:"Richmond upon Thames", year:"2019-01-01", outcome:"Best"},
            {areaName:"Swindon", year:"2019-01-01", outcome:"Better"},
            {areaName:"West Northamptonshire", year:"2019-01-01", outcome:"Better"},
            {areaName:"West Sussex", year:"2019-01-01", outcome:"Best"},
            ];

        expectedResults.forEach((expected) => {
             client.assert(
                response.body.areaHealthData.find(area => area.areaName === expected.areaName)
                .healthData.find(dataPoint => dataPoint.datePeriod.from === expected.year)
                .benchmarkComparison.outcome === expected.outcome
            );
        });
        expectedResults.forEach((expected) => {
             client.assert(
                response.body.areaHealthData.find(area => area.areaName === expected.areaName)
                .indicatorSegments[0]
                .healthData.find(dataPoint => dataPoint.datePeriod.from === expected.year)
                .benchmarkComparison.outcome === expected.outcome
            );
        });
    });
%}


### Check Quintile Benchmarking against AreaGroup - No Judgement - current site doesn't
GET http://localhost:5144/indicators/90453/data?area_codes=K84031&area_codes=K84017&area_type=gps&years=2023&years=2022&years=2021&years=2020&ancestor_code=E38000136&benchmark_ref_type=SubNational

> {%
        client.test("Quintile with Benchmark against AreaGroup", () => {
            const expectedResults = [ 
                {areaName:"The Leys Health Centre", year:"2020-01-01", outcome:"Middle"},
                {areaName:"The Leys Health Centre", year:"2021-01-01", outcome:"Low"},
                {areaName:"The Leys Health Centre", year:"2022-01-01", outcome:"High"},
                {areaName:"The Leys Health Centre", year:"2023-01-01", outcome:"High"},
                {areaName:"Windrush Medical Practice", year:"2020-01-01", outcome:"Low"},
                {areaName:"Windrush Medical Practice", year:"2021-01-01", outcome:"High"},
                {areaName:"Windrush Medical Practice", year:"2022-01-01", outcome:"Highest"},
                {areaName:"Windrush Medical Practice", year:"2023-01-01", outcome:"High"},
                ];

            expectedResults.forEach((expected) => {
                client.assert(
                    response.body.areaHealthData.find(area => area.areaName === expected.areaName)
                    .healthData.find(dataPoint => dataPoint.datePeriod.from === expected.year)
                    .benchmarkComparison.outcome === expected.outcome,
                    `failed for ${expected.areaName} ${expected.year} ${expected.outcome}`
                );
            });

            expectedResults.forEach((expected) => {
                client.assert(
                    response.body.areaHealthData.find(area => area.areaName === expected.areaName)
                    .indicatorSegments[0]
                    .healthData.find(dataPoint => dataPoint.datePeriod.from === expected.year)
                    .benchmarkComparison.outcome === expected.outcome,
                    `failed for ${expected.areaName}`
                );
            });             
        });
%}


### Check Quintile Benchmarking for small group size
GET http://localhost:5144/indicators/90453/data?area_codes=D83060&area_codes=D83075&area_type=gps&years=2023&years=2022&years=2021&years=2020&ancestor_code=U10430&benchmark_ref_type=SubNational

> {%
        client.test("Quintile with Benchmark against small group size", () => {
            const expectedResults = [ 
                {areaName:"Hardwicke House Group Practice", year:"2020-01-01", outcome:"NotCompared"},
                {areaName:"Hardwicke House Group Practice", year:"2021-01-01", outcome:"NotCompared"},
                {areaName:"Hardwicke House Group Practice", year:"2022-01-01", outcome:"NotCompared"},
                {areaName:"Hardwicke House Group Practice", year:"2023-01-01", outcome:"NotCompared"},
                {areaName:"Siam Surgery", year:"2020-01-01", outcome:"NotCompared"},
                {areaName:"Siam Surgery", year:"2021-01-01", outcome:"NotCompared"},
                {areaName:"Siam Surgery", year:"2022-01-01", outcome:"NotCompared"},
                {areaName:"Siam Surgery", year:"2023-01-01", outcome:"NotCompared"},
                ];

            expectedResults.forEach((expected) => {
                client.assert(
                    response.body.areaHealthData.find(area => area.areaName === expected.areaName)
                    .healthData.find(dataPoint => dataPoint.datePeriod.from === expected.year)
                    .benchmarkComparison.outcome === expected.outcome,
                    `failed for ${expected.areaName} ${expected.year} ${expected.outcome}`
                );
            });

            expectedResults.forEach((expected) => {
                client.assert(
                    response.body.areaHealthData.find(area => area.areaName === expected.areaName)
                    .indicatorSegments[0]
                    .healthData.find(dataPoint => dataPoint.datePeriod.from === expected.year)
                    .benchmarkComparison.outcome === expected.outcome,
                    `failed for ${expected.areaName}`
                );
            });            
        });
%}

### check null quintile comparison when areaGroup is not a descendant of the areaType

GET http://localhost:5144/indicators/94103/data?area_codes=E09000027&area_codes=E10000032&area_codes=E10000018&area_codes=E06000062&area_codes=E06000030&area_codes=E06000050&area_type=counties-and-unitary-authorities&years=2019&years=2016&ancestor_code=E07000228&benchmark_ref_type=SubNational

> {%
    client.test("Expected empty healthdata arrays if area_codes not in ancestor_code", function (callbackfn, thisArg) {
        client.assert(response.status === 200, "Response status is not 200");
        response.body.areaHealthData.forEach((areaResult) => {
            areaResult.healthData.forEach((healthData) => {
                client.assert(healthData.benchmarkComparison == null, "Benchmark comparison should be null for non-descendant areas");
            });          
        });        
        
        response.body.areaHealthData.forEach((areaResult) => {
            areaResult.indicatorSegments[0].healthData.forEach((healthData) => {
                client.assert(healthData.benchmarkComparison == null, "Benchmark comparison should be null for non-descendant areas");
            });          
        });
    });
%}

#### check quintile comparison when England and an ancestor code is provided - benchmark against ancestor
GET http://localhost:5144/indicators/90453/data?area_codes=K84031&area_codes=K84017&area_codes=E38000136&area_codes=E92000001&area_type=gps&years=2023&years=2022&years=2021&years=2020&ancestor_code=E38000136&benchmark_ref_type=SubNational

> {% 
    client.test("Expected area codes and outcomes if ancestor code is provided", function (callbackfn, thisArg) {
       client.assert(response.status === 200, "Response status is not 200");
       client.assert(response.body.areaHealthData[0].areaCode =="E38000136", "AreaCode not as expected");
       client.assert(response.body.areaHealthData[0].healthData[0].benchmarkComparison == null, "Outcome not as expected");
       client.assert(response.body.areaHealthData[0].indicatorSegments[0].healthData[0].benchmarkComparison == null, "Outcome not as expected");
       
       client.assert(response.body.areaHealthData[1].areaCode =="E92000001", "AreaCode not as expected");
       client.assert(response.body.areaHealthData[1].healthData[0].benchmarkComparison == null, "Outcome not as expected");
       client.assert(response.body.areaHealthData[1].indicatorSegments[0].healthData[0].benchmarkComparison == null, "Outcome not as expected");

       client.assert(response.body.areaHealthData[2].areaCode =="K84031", "AreaCode not as expected");
       client.assert(response.body.areaHealthData[2].healthData[0].benchmarkComparison.outcome =="Middle", "Outcome not as expected");
       client.assert(response.body.areaHealthData[2].indicatorSegments[0].healthData[0].benchmarkComparison.outcome =="Middle", "Outcome not as expected");
        
       client.assert(response.body.areaHealthData[3].areaCode =="K84017", "AreaCode not as expected");
       client.assert(response.body.areaHealthData[3].healthData[0].benchmarkComparison.outcome =="Low", "Outcome not as expected");
       client.assert(response.body.areaHealthData[3].indicatorSegments[0].healthData[0].benchmarkComparison.outcome =="Low", "Outcome not as expected");
       
       client.assert(response.body.areaHealthData.length == 4);
   });

#### check quintile comparison when England and an ancestor code is provided. Ensure that an unrelated area returns an empty result - benchmark against ancestor
GET http://localhost:5144/indicators/90453/data?area_codes=K84031&area_codes=K84017&area_codes=P81002&area_type=gps&years=2023&years=2022&years=2021&years=2020&ancestor_code=E38000136&area_codes=E38000136&area_codes=E92000001&benchmark_ref_type=SubNational
> {% 
    client.test("Expected area codes and outcomes if ancestor code and unrelated area code is provided", function (callbackfn, thisArg) {
       client.assert(response.status === 200, "Response status is not 200");
       client.assert(response.body.areaHealthData[0].areaCode =="E38000136", "AreaCode not as expected");
       client.assert(response.body.areaHealthData[0].healthData[0].benchmarkComparison == null, "Outcome not as expected");
       client.assert(response.body.areaHealthData[0].indicatorSegments[0].healthData[0].benchmarkComparison == null, "Outcome not as expected");
       
       client.assert(response.body.areaHealthData[1].areaCode =="E92000001", "AreaCode not as expected");
       client.assert(response.body.areaHealthData[1].healthData[0].benchmarkComparison == null, "Outcome not as expected");
       client.assert(response.body.areaHealthData[1].indicatorSegments[0].healthData[0].benchmarkComparison == null, "Outcome not as expected");

       client.assert(response.body.areaHealthData[2].areaCode =="K84031", "AreaCode not as expected");
       client.assert(response.body.areaHealthData[2].healthData[0].benchmarkComparison.outcome =="Middle", "Outcome not as expected");
       client.assert(response.body.areaHealthData[2].indicatorSegments[0].healthData[0].benchmarkComparison.outcome =="Middle", "Outcome not as expected");

       client.assert(response.body.areaHealthData[3].areaCode =="K84017", "AreaCode not as expected");
       client.assert(response.body.areaHealthData[3].healthData[0].benchmarkComparison.outcome =="Low", "Outcome not as expected");
       client.assert(response.body.areaHealthData[3].indicatorSegments[0].healthData[0].benchmarkComparison.outcome =="Low", "Outcome not as expected");

       client.assert(response.body.areaHealthData[4].areaCode =="P81002", "AreaCode not as expected");
       client.assert(response.body.areaHealthData[4].healthData == [], "Outcome not as expected");
       client.assert(response.body.areaHealthData[4].indicatorSegments[0].healthData == [], "Outcome not as expected");

       client.assert(response.body.areaHealthData.length == 5);
   });
    
#### check quintile comparison when England and an ancestor code is provided - benchmark against England
GET http://localhost:5144/indicators/90453/data?area_codes=K84031&area_codes=K84017&area_codes=E38000136&area_codes=E92000001&area_type=gps&years=2023&years=2022&years=2021&years=2020&ancestor_code=E92000001&benchmark_ref_type=SubNational

> {% 
    client.test("Expected area codes and outcomes if ancestor code is provided", function (callbackfn, thisArg) {
       client.assert(response.status === 200, "Response status is not 200");
       client.assert(response.body.areaHealthData[0].areaCode =="E38000136", "AreaCode not as expected");
       client.assert(response.body.areaHealthData[0].healthData[0].benchmarkComparison == null, "Outcome not as expected");
       client.assert(response.body.areaHealthData[0].indicatorSegments[0].healthData[0].benchmarkComparison == null, "Outcome not as expected");
       
       client.assert(response.body.areaHealthData[1].areaCode =="E92000001", "AreaCode not as expected");
       client.assert(response.body.areaHealthData[1].healthData[0].benchmarkComparison == null, "Outcome not as expected");
       client.assert(response.body.areaHealthData[1].indicatorSegments[0].healthData[0].benchmarkComparison == null, "Outcome not as expected");

       client.assert(response.body.areaHealthData[2].areaCode =="K84031", "AreaCode not as expected");
       client.assert(response.body.areaHealthData[2].healthData[0].benchmarkComparison.outcome =="Middle", "Outcome not as expected");
       client.assert(response.body.areaHealthData[2].indicatorSegments[0].healthData[0].benchmarkComparison.outcome =="Middle", "Outcome not as expected");
        
       client.assert(response.body.areaHealthData[3].areaCode =="K84017", "AreaCode not as expected");
       client.assert(response.body.areaHealthData[3].healthData[0].benchmarkComparison.outcome =="Middle", "Outcome not as expected");
       client.assert(response.body.areaHealthData[3].indicatorSegments[0].healthData[0].benchmarkComparison.outcome =="Middle", "Outcome not as expected");
       
       client.assert(response.body.areaHealthData.length == 4);
   });
%}

### Ensure unpublished data is not returned
GET http://localhost:5144/indicators/90453/data?area_codes=K84031&area_codes=K84017&area_codes=P81002&area_type=gps&years=2025&years=2024&years=2023&years=2022&years=2021&years=2020&ancestor_code=E38000136&area_codes=E38000136&area_codes=E92000001&benchmark_ref_type=SubNational
> {%
    client.test("Ensure unpublished data is not returned", function (callbackfn, thisArg) {
        client.assert(response.status === 200, "Response status is not 200");

        client.assert(response.body.areaHealthData[3].areaCode =="K84031", "AreaCode not as expected");

        healthData = response.body.areaHealthData[3].indicatorSegments[0].healthData;
        yearList = [];
        healthData.forEach(item => {
            yearList.push(item.year);
        });

        expectedYears = [2020, 2021, 2022, 2023, 2024];

        containsAllExpectedYears = expectedYears.every(r => yearList.includes(r))
        client.assert(containsAllExpectedYears == true)
        client.assert(yearList.indexOf(2025) == -1)
        client.assert(yearList.length == 5)
    });
%}

### Ensure unpublished and published data is returned for a quintiles indicator
GET http://localhost:5144/indicators/90453/data/all?area_codes=E38000101&area_type=gps&years=2025&years=2024&years=2023&years=2022&years=2021&years=2020&ancestor_code=E38000136&area_codes=E38000136&area_codes=E92000001&benchmark_ref_type=SubNational
> {%
    client.test("Ensure unpublished and published data is returned - quintile", function (callbackfn, thisArg) {
        client.assert(response.status === 200, "Response status is not 200");

        client.assert(response.body.benchmarkMethod =="Quintiles", "benchmarkMethod not as expected");

        healthData = response.body.areaHealthData[2].indicatorSegments[0].healthData;
        yearList = [];
        healthData.forEach(item => {
            yearList.push(item.year);
        });

        expectedYears = [2020, 2021, 2022, 2023, 2024, 2025];
        
        containsAllExpectedYears = expectedYears.every(r => yearList.includes(r))
        client.assert(containsAllExpectedYears == true)
        client.assert(yearList.length == 6)
    });
%}

### A large request to test performance
GET http://localhost:5144/indicators/383/data?area_type=nhs-sub-integrated-care-boards&ancestor_code=E92000001&area_codes=E38000006&area_codes=E38000007&area_codes=E38000008&area_codes=E38000014&area_codes=E38000015&area_codes=E38000016&area_codes=E38000021&area_codes=E38000024&area_codes=E38000025&area_codes=E38000028&area_codes=E38000030&area_codes=E38000034&area_codes=E38000044&area_codes=E38000045&area_codes=E38000049&area_codes=E38000050&area_codes=E38000051&area_codes=E38000052&area_codes=E38000053&area_codes=E38000062&area_codes=E38000068&area_codes=E38000079&area_codes=E38000080&area_codes=E38000085&area_codes=E38000086&area_codes=E38000089&area_codes=E38000091&area_codes=E38000097&area_codes=E38000101&area_codes=E38000106&area_codes=E38000117&area_codes=E3800119&area_codes=E38000122&area_codes=E38000126&area_codes=E38000127&area_codes=E38000130&area_codes=E38000135&area_codes=E38000136&area_codes=E38000137&area_codes=E38000141&area_codes=E38000143&area_codes=E38000146&area_codes=E38000150&area_codes=E38000153&area_codes=E38000161&area_codes=E38000163&area_codes=E38000168&area_codes=E38000170
