
### CHECK GET area details fully populated, including direct children and siblings

# east basildon PCN
GET http://localhost:5144/areas/U15488?include_children=true&include_siblings=true

> {%
    client.test("Expected basildon data returned", function (callbackfn, thisArg) {
        client.assert(response.status === 200, "Response status is not 200");

        let area = response.body;

        // 2025-02-26 for a short while we will have 2 areas with code E38000007
        // - NHS Basildon And Brentwood ICB
        // - Mid and South Essex ICB - 99E
        // this should be resolved when we start using 'real' data in the database
        client.assert(area.parents.length === 1, "wrong number of parents")
        console.log("a1: [" + area.parents[0].code + "]")
        client.assert(area.parents[0].code === "E38000007", "parent: wrong code");
        client.assert(area.parents[0].name === "Mid and South Essex ICB - 99E", "parent: wrong name");
        client.assert(area.parents[0].areaType.key === "nhs-sub-integrated-care-boards", "parent: wrong area type");

        client.assert(area.code === "U15488", "area: wrong code");
        client.assert(area.name === "East Basildon PCN", "area: wrong name");
        client.assert(area.areaType.key === "nhs-primary-care-networks", "area: wrong area type");

        // 2 children expected in basildon
        client.assert(area.children.length > 0, "children:no children");
        client.assert(area.children.filter(x => x.code === "F81186", "children:F81186 not found").length === 1)
        client.assert(area.children.filter(x => x.code === "F81640", "children:F81640 not found").length === 1)
        client.assert(area.children[0].areaType.key === 'gps', "children: incorrect area type")
        client.assert(area.children[1].areaType.key === 'gps', "children: incorrect area type")

        // 1 sibling expected for basildon
        client.assert(area.siblings.length > 0, "siblings: no siblings");
        client.assert(area.siblings.filter(x => x.code === "U55146" && x.name == "Central Basildon PCN").length === 1, "siblings: U55146 missing or incorrect") // "NHS Cambridgeshire and Peterborough ICB"
        client.assert(area.siblings[0].areaType.key === 'nhs-primary-care-networks', "siblings: wrong area type")
    });
%}

### CHECK GET area details, including children of type 'GP'

# England
GET http://localhost:5144/areas/E92000001?include_children=true&child_area_type=gps

> {%
    client.test("Expected root area returned", function (callbackfn, thisArg) {
        client.assert(response.status === 200, "Response status is not 200");

        let area = response.body;

        // England is a root, so has no parent
        client.assert(!area.parent);

        client.assert(area.code === "E92000001");
        client.assert(area.name === "England");

        // check we have children and they are all GP
        client.assert(area.children.length > 0);
        client.assert(area.children.filter(x => x.areaType.key === "gps").length === area.children.length)
    });
%}

###