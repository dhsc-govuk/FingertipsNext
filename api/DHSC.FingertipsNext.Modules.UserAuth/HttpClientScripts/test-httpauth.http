## Call authorised user endpoint without a valid bearer token and verify 401 unauthorised response
@disabled # disabled pending integration with entra external id - DHSCFT-950
GET http://localhost:5144/user/info
> {%
    // client.test("Expected authenticated endpoint returns authentication failure", function (callbackfn, thisArg) {
    //     client.assert(response.status === 401, "Response status should indicate user is unauthorized.");
    // });
%}

## Call authorised indicator permissions endpoint without a valid bearer token and verify 401 unauthorised response
@disabled # disabled pending integration with entra external id - DHSCFT-950
HEAD http://localhost:5144/user/indicator/123
> {%
    // client.test("Expected authenticated endpoint returns authentication failure", function (callbackfn, thisArg) {
    //     client.assert(response.status === 401, "Response status should indicate user is unauthorized");
    // });
%}


## Call authorised indicator permissions endpoint with a query string, but without a valid bearer token and verify 401 unauthorised response
@disabled # disabled pending integration with entra external id - DHSCFT-950
HEAD http://localhost:5144/user/indicator?indicator_ids=123
> {%
    // client.test("Expected authenticated endpoint returns authentication failure", function (callbackfn, thisArg) {
    //     client.assert(response.status === 401, "Response status should indicate user is unauthorized");
    // });
%}


## Call authorised indicator permissions endpoint with a query string, with a valid bearer token and verify 200 ok response
{{+
    const { spawnSync } = require('child_process');
    const path = require('node:path');

    const entrypoint = path.join(__dirname, '..','..','DHSC.FingertipsNext.Api');

    const result = spawnSync('dotnet user-jwts create', ['-o', 'token', '--audience', 'http://localhost:8080'], {
        cwd: entrypoint,
        shell: true, 
        encoding: 'utf-8' // So the output is a string, not a Buffer
    });
    
    exports.token = result.stdout.trim();
    console.info(exports.token)
    console.log(exports.token)
}}
GET http://localhost:5144/user/info
Authorization: Beareer {{token}}
> {%
    client.test("Expected authenticated endpoint returns authentication success", function (callbackfn, thisArg) {
        const authHeader = request.headers.findByName('Authorization').getRawValue();
        client.assert(response.status === 200, "Response status should indicate user is authorized " + authHeader);
    });
%}

