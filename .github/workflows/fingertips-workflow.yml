name: Fingertips Workflow

on:
  workflow_dispatch:
  push:
    branches:
      - "**"
    paths:
      - api/**
      - database/fingertips-db/**
      - frontend/fingertips-frontend/**
      - terraform/**
      - search-setup/**
      - trend-analysis/**
  pull_request:
    branches:
      - main
    paths:
      - api/**
      - database/fingertips-db/**
      - frontend/fingertips-frontend/**
      - terraform/**
      - search-setup/**
      - trend-analysis/**

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      db_changed: ${{ steps.check.outputs.db_changed }}
      api_changed: ${{ steps.check.outputs.api_changed }}
      frontend_changed: ${{ steps.check.outputs.frontend_changed }}
      search_changed: ${{ steps.check.outputs.search_changed }}
      trend_analysis_changed: ${{ steps.check.outputs.trend_analysis_changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Determine changed files
        id: check
        run: |
          PREVIOUS_SHA=$(git rev-parse HEAD~1)
          echo "Previous commit SHA: $PREVIOUS_SHA"

          if git diff --name-only $PREVIOUS_SHA HEAD | grep '^database/fingertips-db/'; then
            echo "DB changes detected"
            echo "db_changed=true" >> $GITHUB_OUTPUT
          else
            echo "No changes found in DB directory"
            echo "db_changed=false" >> $GITHUB_OUTPUT
          fi

          if git diff --name-only $PREVIOUS_SHA HEAD | grep -E '^api/|^terraform/'; then
            echo "API or Terraform changes detected"
            echo "api_changed=true" >> $GITHUB_OUTPUT
          else
            echo "No relevant changes found in API or Terraform directories"
            echo "api_changed=false" >> $GITHUB_OUTPUT
          fi

          if git diff --name-only $PREVIOUS_SHA HEAD | grep -E '^frontend/fingertips-frontend/|^terraform/'; then
            echo "Frontend or Terraform changes detected"
            echo "frontend_changed=true" >> $GITHUB_OUTPUT
          else
            echo "No relevant changes found in Frontend or Terraform directories"
            echo "frontend_changed=false" >> $GITHUB_OUTPUT
          fi

          if git diff --name-only $PREVIOUS_SHA HEAD | grep -E '^search-setup/'; then
            echo "Search setup changes detected"
            echo "search_changed=true" >> $GITHUB_OUTPUT
          else
            echo "No relevant changes found in search setup directory"
            echo "search_changed=false" >> $GITHUB_OUTPUT
          fi

          if git diff --name-only $PREVIOUS_SHA HEAD | grep -E '^trend-analysis/'; then
            echo "Trend analysis application changes detected"
            echo "trend_analysis_changed=true" >> $GITHUB_OUTPUT
          else
            echo "No relevant changes found in the trend analysis application"
            echo "trend_analysis_changed=false" >> $GITHUB_OUTPUT
          fi

  determine-version:
    uses: ./.github/workflows/determine-semver.yml
    with:
      fetch-depth: 0
      gitversion-version: "6.0.x"

  database-build:
    needs: check-changes
    if: >
      github.event_name == 'workflow_dispatch' ||
      needs.check-changes.outputs.db_changed == 'true' ||
      needs.check-changes.outputs.trend_analysis_changed == 'true' ||
      needs.check-changes.outputs.search_changed == 'true'
    name: Build Database
    runs-on: ubuntu-latest
    env:
      dotnet-version: 9.0.x
      dotnet-configuration: "Release"
      database-directory: ./database/fingertips-db
    defaults:
      run:
        working-directory: ${{ env.database-directory }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.dotnet-version }}

      - name: Build database project
        run: dotnet build fingertips-db.sqlproj --configuration ${{ env.dotnet-configuration }}

      - name: Upload .dacpac file artifact
        uses: actions/upload-artifact@v4
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        with:
          name: dacpac
          path: ${{ env.database-directory }}/bin/${{ env.dotnet-configuration }}/fingertips-db.dacpac
          if-no-files-found: error

  api-build-and-test:
    needs: [check-changes, determine-version]
    if: >
      github.event_name == 'workflow_dispatch' ||
      needs.check-changes.outputs.api_changed == 'true'
    name: Build API
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ["9.0.x"]
    defaults:
      run:
        working-directory: ./api
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup dotnet ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Restore Packages
        run: dotnet restore

      - name: Check API Code Format
        run: dotnet format --verify-no-changes

      - name: Build API
        run: dotnet build

      - name: Run Unit Tests
        run: dotnet test --filter FullyQualifiedName\!~IntegrationTests

  trend-analysis-app-test:
    needs: [check-changes, determine-version]
    if: >
      github.event_name == 'workflow_dispatch' ||
      needs.check-changes.outputs.db_changed == 'true' ||
      needs.check-changes.outputs.trend_analysis_changed == 'true' ||
      needs.check-changes.outputs.search_changed == 'true'
    name: Test Trend Analysis App
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ["9.0.x"]
    defaults:
      run:
        working-directory: ./trend-analysis
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup dotnet ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Run Unit Tests
        run: dotnet test

  frontend-build-and-test:
    needs: [check-changes, determine-version]
    if: >
      github.event_name == 'workflow_dispatch' ||
      needs.check-changes.outputs.frontend_changed == 'true'
    name: Build Frontend
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ["22.x"]
    env:
      NEXT_TELEMETRY_DISABLED: "true"
      frontend-directory: ./frontend/fingertips-frontend
    defaults:
      run:
        working-directory: ${{ env.frontend-directory }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm
          cache-dependency-path: ${{ env.frontend-directory }}/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Perform type checking
        run: npm run typecheck

      - name: Lint code
        run: npm run lint

      - name: Check code formatting
        run: npm run prettier-ci

      - name: Execute front-end unit tests
        run: npm run test-ci

      - name: Upload code coverage report if tests or thresholds fail - always on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: code-coverage-artefacts
          path: |
            ${{ env.frontend-directory }}/coverage/
          retention-days: 5

  ui-tests-local-mocks:
    needs: [check-changes]
    if: >
      always() &&
      contains(needs.*.result, 'success') &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled') &&
      (
        github.event_name == 'workflow_dispatch' ||
        (
          needs.check-changes.outputs.db_changed == 'true' ||
          needs.check-changes.outputs.api_changed == 'true' || 
          needs.check-changes.outputs.frontend_changed == 'true' ||
          needs.check-changes.outputs.search_changed == 'true'
        )
      )
    uses: ./.github/workflows/ui-tests.yml

  e2e-and-api-tests:
    needs: [check-changes]
    if: >
      always() &&
      contains(needs.*.result, 'success') &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled') &&
      (
        github.event_name == 'workflow_dispatch' ||
        (
          needs.check-changes.outputs.db_changed == 'true' ||
          needs.check-changes.outputs.api_changed == 'true' || 
          needs.check-changes.outputs.frontend_changed == 'true' ||
          needs.check-changes.outputs.search_changed == 'true'
        )
      )
    uses: ./.github/workflows/e2e-and-api-tests.yml
    with:
      environment: dev
      playwright-mode: docker
    secrets:
      fingertips_e2e_db_password: ${{ secrets.FINGERTIPS_E2E_DB_PASSWORD }}

  push-container-api:
    uses: ./.github/workflows/build-container.yml
    needs: [check-changes, determine-version]
    if: >
      always() &&
      contains(needs.*.result, 'success') &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled') &&
      (
        github.event_name == 'workflow_dispatch' ||
        needs.check-changes.outputs.api_changed == 'true'
      )
    with:
      environment: dev
      context-location: api
      container-tag: dhsc.fingertipsnext.api
      git-semver: ${{ needs.determine-version.outputs.sem-ver }}
    secrets:
      azure-credentials: ${{ secrets.AZURE_CREDENTIALS }}
      acr-server: ${{ secrets.ACR_SERVER }}

  push-container-frontend:
    uses: ./.github/workflows/build-container.yml
    needs: [check-changes, determine-version]
    if: >
      always() &&
      contains(needs.*.result, 'success') &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled') &&
      (
        github.event_name == 'workflow_dispatch' ||
        needs.check-changes.outputs.frontend_changed == 'true'
      )
    with:
      environment: dev
      context-location: frontend/fingertips-frontend
      container-tag: dhsc.fingertipsnext.frontend
      git-semver: ${{ needs.determine-version.outputs.sem-ver }}
    secrets:
      azure-credentials: ${{ secrets.AZURE_CREDENTIALS }}
      acr-server: ${{ secrets.ACR_SERVER }}

  deploy-db-dev:
    needs:
      [
        determine-version,
        check-changes,
        database-build,
        e2e-and-api-tests,
        push-container-api,
        push-container-frontend,
      ]
    environment: development
    runs-on: dev
    if: >
      always() &&
      contains(needs.*.result, 'success') &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled') &&
      github.event_name != 'pull_request' &&
      (
        (
          github.event_name == 'push' &&
          github.ref_name == 'main' &&
          (
            needs.check-changes.outputs.db_changed == 'true' ||
            needs.check-changes.outputs.trend_analysis_changed == 'true' ||
            needs.check-changes.outputs.search_changed == 'true'
          )
        ) ||
        github.event_name == 'workflow_dispatch'
      )
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download DACPAC
        uses: actions/download-artifact@v4
        with:
          name: dacpac

      - uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Upload files to Azure Blob Storage
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          az storage blob upload-batch \
            --destination "${{ vars.SQL_DATA_BLOB_CONTAINER }}" \
            --source "DataCreator/DataCreator/data/out" \
            --account-name "${{ secrets.SQL_DATA_STORAGE_ACCOUNT }}" \
            --auth-mode "login" \
            --overwrite true

      - name: Deploy Database
        run: |
          sqlpackage \
            /Action:Publish \
            /SourceFile:"${{ github.workspace }}/fingertips-db.dacpac" \
            /TargetServerName:"${{ secrets.AZURE_SQL_SERVER }}" \
            /TargetDatabaseName:"${{ secrets.AZURE_SQL_DATABASE }}" \
            /TargetUser:"${{ secrets.AZURE_SQL_USER }}" \
            /TargetPassword:"${{ secrets.AZURE_SQL_PASSWORD }}" \
            /p:DropObjectsNotInSource=true \
            /p:BlockOnPossibleDataLoss=false \
            /p:GenerateSmartDefaults=true \
            /v:UseAzureBlob=1 \
            /v:BlobStorageLocation="${{ vars.BLOB_STORAGE_LOCATION }}" \
            /v:MasterKeyPassword="${{ secrets.SQL_MASTER_KEY_PASSWORD }}"

  run-trend-analysis-dev:
    needs: [check-changes, deploy-db-dev]
    if: >
      always() &&
      contains(needs.*.result, 'success') &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled') &&
      github.event_name != 'pull_request' &&
      (
        (
          github.event_name == 'push' &&
          github.ref_name == 'main' &&
          (
            needs.check-changes.outputs.db_changed == 'true' ||
            needs.check-changes.outputs.trend_analysis_changed == 'true' ||
            needs.check-changes.outputs.search_changed == 'true'
          )
        ) ||
        github.event_name == 'workflow_dispatch'
      )
    environment: development
    name: Run Trend Analysis App
    runs-on: dev
    env:
      ACTIONS_RUNNER_DEBUG: true
    strategy:
      matrix:
        dotnet-version: ["9.0.x"]
    defaults:
      run:
        working-directory: ./trend-analysis/TrendAnalysisApp
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Process trends
        env:
          SQLCONNSTR_FINGERTIPS_DB: ${{ secrets.AZURE_SQL_CONNECTION_STRING }}
        run: dotnet run

      - name: Upload updated indicators file
        uses: actions/upload-artifact@v4
        with:
          name: indicators-for-search
          path: ./trend-analysis/TrendAnalysisApp/SearchData/assets/indicators.json

  search-setup-dev:
    needs: [check-changes, deploy-db-dev, run-trend-analysis-dev]
    if: >
      always() &&
      contains(needs.*.result, 'success') &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled') &&
      github.event_name != 'pull_request' &&
      (
        (
          github.event_name == 'push' &&
          github.ref_name == 'main' &&
          (
            needs.check-changes.outputs.search_changed == 'true' ||
            needs.check-changes.outputs.db_changed == 'true' ||
            needs.check-changes.outputs.trend_analysis_changed == 'true'
          )
        ) ||
        github.event_name == 'workflow_dispatch'
      )
    runs-on: dev
    defaults:
      run:
        working-directory: ./search-setup
    environment: development
    env:
      NODE_VERSION: 22.x

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Get secrets"
        id: azure-keyvault-secrets
        run: |
          secrets_get=(fingertips-ai-search-url fingertips-ai-search-api-key)
          for secret_get in ${secrets_get[@]}
          do
            value=$(az keyvault secret show --name $secret_get --vault-name ${{ vars.AZURE_KEY_VAULT }} --query value --output tsv)
            echo "::add-mask::$value"
            echo "$secret_get=$value" >> $GITHUB_OUTPUT
          done

        # Set up Node.js
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: ./search-setup/package-lock.json

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Download updated indicators.json file
      - name: Download updated indicators data
        uses: actions/download-artifact@v4
        with:
          name: indicators-for-search
          path: /tmp/workflow/assets

      # Create index
      - name: Create index
        run: npm run create-index
        env:
          AI_SEARCH_SERVICE_ENDPOINT: ${{ steps.azure-keyvault-secrets.outputs.fingertips-ai-search-url }}
          AI_SEARCH_API_KEY: ${{ steps.azure-keyvault-secrets.outputs.fingertips-ai-search-api-key }}

      # Run tests
      - name: Run tests
        run: npm run test
        env:
          AI_SEARCH_SERVICE_ENDPOINT: ${{ steps.azure-keyvault-secrets.outputs.fingertips-ai-search-url }}
          AI_SEARCH_API_KEY: ${{ steps.azure-keyvault-secrets.outputs.fingertips-ai-search-api-key }}

  deploy-api-dev:
    needs:
      [determine-version, check-changes, push-container-api, search-setup-dev]
    if: >
      always() &&
      contains(needs.*.result, 'success') &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled') &&
      (
        (
          github.event_name == 'pull_request' &&
          github.head_ref == 'main' &&
          needs.check-changes.outputs.api_changed == 'true'
        ) ||
        (
          github.event_name == 'push' &&
          github.ref_name == 'main' &&
          needs.check-changes.outputs.api_changed == 'true'
        ) ||
        github.event_name == 'workflow_dispatch'
      )
    uses: ./.github/workflows/deploy-container.yml
    with:
      environment: development
      tf_state_file_name: fingertips.api.tfstate
      tf_environment: dev
      source_trigger: ${{ github.event_name }}
      container_image_tag: "dhsc.fingertipsnext.api:${{ needs.determine-version.outputs.sem-ver }}"
      container_name: "fingertips-api"
      revision_suffix: ${{ github.run_number }}
      container_port: 8080
      environment_variables: |
        [
          {
            name        = "DB_SERVER"
            secret_name = "fingertips-sql-hostname"
            value       = null
          },
          {
            name        = "DB_NAME"
            secret_name = "fingertips-db-name"
            value       = null
          },
          {
            name        = "DB_USER"
            secret_name = "fingertips-sql-username"
            value       = null
          },
          {
            name        = "DB_PASSWORD"
            secret_name = "fingertips-sql-password"
            value       = null
          },
          {
            name        = "APPLICATIONINSIGHTS_CONNECTION_STRING"
            secret_name = "fingertips-api-application-insights"
            value       = null
          },
          {
            name        = "UPLOAD_STORAGE_ACCOUNT_URI"
            secret_name = "fingertips-upload-storage-uri"
            value       = null
          },
          {
            name        = "UPLOAD_STORAGE_CONTAINER_NAME"
            secret_name = "fingertips-upload-storage-container-name"
            value       = null
          },
          {
            name        = "USER_ASSIGNED_MANAGED_IDENTITY_CLIENT_ID"
            secret_name = "fingertips-container-uai-client-id"
            value       = null
          },
          {
            name        = "AZUREAD__INSTANCE"
            secret_name = null
            value       = "${{ vars.DEVELOPMENT_ENTRA_INSTANCE_URI }}"
          },
          {
            name        = "AZUREAD__TENANTID"
            secret_name = null
            value       = "${{ vars.DEVELOPMENT_ENTRA_TENANT_ID }}"
          },
          {
            name        = "AZUREAD__CLIENTID"
            secret_name = null
            value       = "${{ vars.DEVELOPMENT_ENTRA_CLIENT_ID }}"
          },
          {
            name        = "ADMINROLE"
            secret_name = null
            value       = "${{ vars.DEVELOPMENT_ADMINISTRATOR_GROUP_ID }}"
          }
        ]
      container_liveness_probe: |
        {
          path      = "/healthcheck"
          port      = 8080
          transport = "HTTP"
        }
    secrets:
      arm-client-id: ${{ secrets.ARM_CLIENT_ID }}
      arm-client-secret: ${{ secrets.ARM_CLIENT_SECRET }}
      arm-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      arm-tenant-id: ${{ secrets.AZURE_TENANT_ID }}

  extract-git-info:
    runs-on: ubuntu-latest
    outputs:
      git_hash: ${{ steps.setvars.outputs.git_hash }}
      git_tag: ${{ steps.setvars.outputs.git_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: setvars
        run: |
          echo "git_hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "git_tag=$(git describe --tags --abbrev=0 --always)" >> $GITHUB_OUTPUT

  deploy-frontend-dev:
    needs:
      [
        determine-version,
        check-changes,
        push-container-frontend,
        deploy-api-dev,
        extract-git-info,
      ]
    if: >
      always() &&
      contains(needs.*.result, 'success') &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled') &&
      (
        (
          github.event_name == 'pull_request' &&
          github.head_ref == 'main' &&
          needs.check-changes.outputs.frontend_changed == 'true'
        ) ||
        (
          github.event_name == 'push' &&
          github.ref_name == 'main' &&
          needs.check-changes.outputs.frontend_changed == 'true'
        ) ||
        github.event_name == 'workflow_dispatch'
      )
    uses: ./.github/workflows/deploy-container.yml
    with:
      environment: development
      tf_state_file_name: fingertips.frontend.tfstate
      tf_environment: dev
      source_trigger: ${{ github.event_name }}
      container_image_tag: "dhsc.fingertipsnext.frontend:${{ needs.determine-version.outputs.sem-ver }}"
      container_name: "fingertips-frontend"
      revision_suffix: ${{ github.run_number }}
      container_port: 3000
      environment_variables: |
        [
          {
            name        = "FINGERTIPS_API_URL"
            secret_name = null
            value       = "${{ vars.DEVELOPMENT_FINGERTIPS_API_URL }}"
          },
          {
            name        = "DHSC_AI_SEARCH_USE_MOCK_SERVICE"
            secret_name = null
            value       = false
          },
          {
            name        = "DHSC_AI_SEARCH_API_KEY"
            secret_name = "fingertips-ai-search-api-key"
            value       = null
          },
          {
            name        = "DHSC_AI_SEARCH_SERVICE_URL"
            secret_name = "fingertips-ai-search-url"
            value       = null
          },
          {
            name        = "APPLICATIONINSIGHTS_CONNECTION_STRING"
            secret_name = "fingertips-frontend-application-insights"
            value       = null
          },
          {
            name        = "NEXT_PUBLIC_FINGERTIPS_GIT_HASH"
            secret_name = null
            value       = "${{ needs.extract-git-info.outputs.git_hash }}"
          },
          {
            name        = "NEXT_PUBLIC_FINGERTIPS_GIT_TAG"
            secret_name = null
            value       = "${{ needs.extract-git-info.outputs.git_tag }}"
          },
          {
            name        = "AUTH_SECRET"
            secret_name = "fingertips-webserver-auth-secret"
            value       = null
          },
          {
            name        = "AUTH_CLIENT_SECRET"
            secret_name = "fingertips-externalid-client-secret"
            value       = null
          },
          {
            name        = "AUTH_CLIENT_ID"
            secret_name = null
            value       = "${{ vars.DEVELOPMENT_ENTRA_CLIENT_ID }}"
          },
          {
            name        = "AUTH_TENANT_ID"
            secret_name = null
            value       = "${{ vars.DEVELOPMENT_ENTRA_TENANT_ID }}"
          }
        ]
      container_liveness_probe: |
        {
          path      = "/healthcheck"
          port      = 3000
          transport = "HTTP"
        }
    secrets:
      arm-client-id: ${{ secrets.ARM_CLIENT_ID }}
      arm-client-secret: ${{ secrets.ARM_CLIENT_SECRET }}
      arm-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      arm-tenant-id: ${{ secrets.AZURE_TENANT_ID }}

  e2e-tests-development:
    needs:
      [
        check-changes,
        deploy-db-dev,
        run-trend-analysis-dev,
        search-setup-dev,
        deploy-api-dev,
        deploy-frontend-dev,
      ]
    uses: ./.github/workflows/e2e-and-api-tests.yml
    if: >
      always() &&
      contains(needs.*.result, 'success') &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled') &&
      github.event_name != 'pull_request' &&
      (
        (
          github.event_name == 'push' &&
          github.ref_name == 'main' &&
          (
            needs.check-changes.outputs.db_changed == 'true' ||
            needs.check-changes.outputs.api_changed == 'true' ||
            needs.check-changes.outputs.frontend_changed == 'true' ||
            needs.check-changes.outputs.search_changed == 'true' ||
            needs.check-changes.outputs.trend_analysis_changed == 'true'
          )
        ) ||
        github.event_name == 'workflow_dispatch'
      )
    with:
      environment: dev
      playwright-mode: azure
    secrets:
      slack-webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
