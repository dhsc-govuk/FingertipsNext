name: Fingertips CI

env:
  dotnet-version: 9.0.x
  frontend-directory: ./frontend/fingertips-frontend
  NEXT_TELEMETRY_DISABLED: true

on:
  push:
    branches:
      ## ** is required to match branches with / in their name
      - "**"
  pull_request:
    branches:
      - main

jobs:
  git-version:
    name: Determine semantic version number
    runs-on: ubuntu-latest

    outputs:
      sem-ver: ${{ steps.version_step.outputs.semVer }}
      full-sem-ver: ${{ steps.version_step.outputs.fullSemVer }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          # GitVersion requires the entire history
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v3.0.0
        with:
          versionSpec: "6.x"

      - name: Generate semantic version
        id: version_step
        uses: gittools/actions/gitversion/execute@v3.0.0

  e2e-tests:
    timeout-minutes: 60
    runs-on: ubuntu-latest

    strategy:
      matrix:
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
        node-version: ["22.x"]

    defaults:
      run:
        working-directory: ${{ env.frontend-directory }}

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: ${{ env.frontend-directory }}/package-lock.json
      - name: Install dependencies
        run: npm ci

      - name: Get installed Playwright version
        id: playwright-version
        run: echo "PLAYWRIGHT_VERSION=$(node -e "console.log(require('./package-lock.json').dependencies['@playwright/test'].version)")" >> $GITHUB_ENV
      - name: Cache playwright binaries
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}
      - run: npm ci
      - run: npx playwright install --with-deps
        if: steps.playwright-cache.outputs.cache-hit != 'true'

      - name: Run Playwright tests
        run: npx playwright test
      - uses: actions/upload-artifact@v4
        if: ${{ failure() || !cancelled() }}
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  frontend-unit-test-and-static-analysis:
    name: Run unit tests and static analysis against frontend
    runs-on: ubuntu-latest

    strategy:
      matrix:
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
        node-version: ["22.x"]

    defaults:
      run:
        working-directory: ${{ env.frontend-directory }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: ${{ env.frontend-directory }}/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Perform type checking
        run: npm run typecheck

      - name: Lint code
        run: npm run lint

      - name: Check code formatting
        run: npm run prettier-ci

      - name: Execute jest unit tests
        run: npm run test-ci

  e2e-test-chrome:
    name: Run e2e tests against chrome
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ["22.x"]

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: ${{ env.frontend-directory }}/package-lock.json

      - name: Execute e2e cypress tests - chrome
        uses: cypress-io/github-action@v6
        with:
          browser: chrome
          working-directory: ${{ env.frontend-directory }}
          start: npm run dev:standalone
          wait-on: "http://localhost:3000/search"
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: ${{ env.frontend-directory }}/cypress/screenshots
          if-no-files-found: ignore

  e2e-test-safari:
    name: Run e2e tests against safari
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ["22.x"]

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: ${{ env.frontend-directory }}/package-lock.json

      - name: Install dependencies
        uses: cypress-io/github-action@v6
        with:
          working-directory: ${{ env.frontend-directory }}
          # install WebKit browser dependencies
          build: npx playwright install-deps webkit
          runTests: false

      - name: Execute e2e cypress tests - webkit
        uses: cypress-io/github-action@v6
        with:
          browser: webkit
          working-directory: ${{ env.frontend-directory }}
          install: false
          start: npm run dev:standalone
          wait-on: "http://localhost:3000/search"
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: ${{ env.frontend-directory }}/cypress/screenshots
          if-no-files-found: ignore

  container-build:
    name: Build container
    runs-on: ubuntu-latest
    needs: git-version

    strategy:
      matrix:
        application: ["Frontend", "API"]
        include:
          - application: Frontend
            container-tag: dhsc.fingertipsnext.frontend
            context-location: frontend/fingertips-frontend
          - application: API
            container-tag: dhsc.fingertipsnext.api
            context-location: api
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # TODO: Re-enable this when we have Azure access
      # TODO: Investigate the use of OpenID Connect for authentication: https://docs.github.com/en/actions/security-for-github-actions/security-hardening-your-deployments/about-security-hardening-with-openid-connect
      # - name: Login to container registry
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ${{ vars.CONTAINER_REGISTRY }}
      #     username: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
      #     password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}

      - name: Generate container metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          # TODO: Tag with the registry name when we have Azure access
          # images: ${{ vars.CONTAINER_REGISTRY }}/${{ matrix.container-tag }}
          images: ${{ matrix.container-tag }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            # set latest tag for default branch
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.git-version.outputs.sem-ver }}
            type=raw,value=${{ needs.git-version.outputs.full-sem-ver }}

      - name: Build and push container
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context-location }}
          # TODO: Re-enable pushing the image to the repository when we have Azure access
          # push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  terraform-build:
    name: Validate Terraform
    runs-on: ubuntu-latest

    strategy:
      matrix:
        tf-dir: ["account", "environment"]

    defaults:
      run:
        working-directory: terraform/${{ matrix.tf-dir }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8

      - name: Initialise Terraform
        run: terraform init -backend=false

      - name: Validate Terraform configuration
        run: terraform validate

      - name: Check Terraform formatting
        run: terraform fmt -recursive -check -diff

  database-build:
    name: Build database project
    runs-on: ubuntu-latest

    env:
      database-directory: database/fingertips-db

    defaults:
      run:
        working-directory: ${{ env.database-directory }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.dotnet-version }}

      - name: Build database project
        run: dotnet build fingertips-db.sqlproj

      - name: Upload .dacpac file artifact
        uses: actions/upload-artifact@v4
        with:
          name: dacpac
          path: ${{ env.database-directory }}/bin/**/fingertips-db.dacpac
          if-no-files-found: error
