name: Fingertips API Deploy

on:
  workflow_dispatch:
  workflow_run:
    workflows: [Fingertips API Build]
    types:
      - completed
    branches:
      - main

jobs:
  check-db-changes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          ref: ${{ github.event.workflow_run.head_branch }}

      - name: Check for changes in database directory
        id: check
        run: |
          if git diff --name-only HEAD~1 HEAD | grep '^database/'; then
            echo "DB changes detected"
            echo "DB_CHANGED=true" >> $GITHUB_ENV
          else
            echo "No DB changes detected"
            echo "DB_CHANGED=false" >> $GITHUB_ENV
          fi

      - name: Wait for Database Deployment to Complete
        uses: actions/github-script@v7
        id: database_status
        if: env.DB_CHANGED == 'true'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          retries: 10
          script: |
            async function waitForDBDeployment() {
              const workflowName = 'fingertips-db-deploy.yml';
              const headSHA = '${{ github.event.workflow_run.head_branch }}';
              const maxRetries = 20;
              const delay = 30 * 1000; // 30 seconds per check
              
              for (let i = 0; i < maxRetries; i++) {
                const runs = await github.rest.actions.listWorkflowRuns({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: workflowName,
                  head_sha: headSHA,
                });
  
                if (runs.data.workflow_runs.length > 0) {
                  const latestRun = runs.data.workflow_runs[0];
                  
                  if (latestRun.status === 'completed') {
                    console.log(`Database deployment completed with status: ${latestRun.conclusion}`);
                    core.setOutput("db_completed", 'true');
                    return;
                  } else {
                    console.log(`Database deployment is still running. Status: ${latestRun.status}`);
                  }
                } else {
                  console.log("No database deployment run found yet.");
                }
  
                await new Promise(resolve => setTimeout(resolve, delay));
              }
  
              console.log("Database deployment did not complete within the timeout period.");
              core.setFailed("Database deployment did not complete in time.");
            }
  
            await waitForDBDeployment();

  determine-version:
    uses: ./.github/workflows/determine-semver.yml
    with:
      fetch-depth: 0
      gitversion-version: "6.0.x"

  api-deploy-development:
    needs: [determine-version, check-db-changes]
    uses: ./.github/workflows/deploy-container.yml
    with:
      tf_state_file_name: fingertips.api.tfstate
      environment: development
      tf_environment: dev
      source_branch: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_branch || github.ref_name }}
      source_trigger: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.event || github.event_name }}
      container_image_tag: ${{ github.event_name == 'workflow_run' && format('dhsc.fingertipsnext.api:{0}', needs.determine-version.outputs.sem-ver) || 'dhsc.fingertipsnext.api:latest' }}
      container_name: "fingertips-api"
      revision_suffix: ${{ github.run_number }}
      container_port: 8080
      environment_variables: |
        [
          {
            name        = "DB_SERVER"
            secret_name = "fingertips-sql-hostname"
            value       = null
          },
          {
            name        = "DB_NAME"
            secret_name = "fingertips-db-name"
            value       = null
          },
          {
            name        = "DB_USER"
            secret_name = "fingertips-sql-username"
            value       = null
          },
          {
            name        = "DB_PASSWORD"
            secret_name = "fingertips-sql-password"
            value       = null
          }
        ]
      container_liveness_probe: |
        {
          path      = "/healthcheck"
          port      = 8080
          transport = "HTTP"
        }
    secrets:
      arm-client-id: ${{ secrets.ARM_CLIENT_ID }}
      arm-client-secret: ${{ secrets.ARM_CLIENT_SECRET }}
      arm-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      arm-tenant-id: ${{ secrets.AZURE_TENANT_ID }}

  e2e-tests-development:
    uses: ./.github/workflows/e2e-tests.yml
    if: |
      ${{
        github.event_name == 'workflow_dispatch' ||
        (
          github.event_name == 'workflow_run' &&
          (
            github.event.workflow_run.event == 'push' ||
            github.event.workflow_run.event == 'workflow_dispatch'
          )
        )
      }}
    needs: api-deploy-development
    with:
      env-url: ${{ needs.api-deploy-development.outputs.frontend-dev-url }}
      send-slack-on-fail: "true"
    secrets:
      slack-webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
