/* tslint:disable */
/* eslint-disable */
/**
 * Fingertips API
 * An API to query public health indicator data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ProfileFeedback@dhsc.gov.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Details of the deprivation category that this data point belongs to.
 * @export
 * @interface DeprivationData
 */
export interface DeprivationData {
    /**
     * A number which represents this deprivation value's inherent place in the sequence of all values for this deprivation type. Can be used to show values ordered by their deprivation dimension.
     * @type {number}
     * @memberof DeprivationData
     */
    sequence: number;
    /**
     * The deprivation value for this data point.
     * @type {string}
     * @memberof DeprivationData
     */
    value: string;
    /**
     * The deprivation category that this data point's deprivation value belongs to.
     * @type {string}
     * @memberof DeprivationData
     */
    type: string;
    /**
     * Indicates if the datapoint is an aggregated value for the deprivation dimension.
     * @type {boolean}
     * @memberof DeprivationData
     */
    isAggregate: boolean;
}

/**
 * Check if a given object implements the DeprivationData interface.
 */
export function instanceOfDeprivationData(value: object): value is DeprivationData {
    if (!('sequence' in value) || value['sequence'] === undefined) return false;
    if (!('value' in value) || value['value'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('isAggregate' in value) || value['isAggregate'] === undefined) return false;
    return true;
}

export function DeprivationDataFromJSON(json: any): DeprivationData {
    return DeprivationDataFromJSONTyped(json, false);
}

export function DeprivationDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): DeprivationData {
    if (json == null) {
        return json;
    }
    return {
        
        'sequence': json['sequence'],
        'value': json['value'],
        'type': json['type'],
        'isAggregate': json['isAggregate'],
    };
}

export function DeprivationDataToJSON(json: any): DeprivationData {
    return DeprivationDataToJSONTyped(json, false);
}

export function DeprivationDataToJSONTyped(value?: DeprivationData | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'sequence': value['sequence'],
        'value': value['value'],
        'type': value['type'],
        'isAggregate': value['isAggregate'],
    };
}

