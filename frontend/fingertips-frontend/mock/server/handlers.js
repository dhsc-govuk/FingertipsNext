/**
 * This file is AUTO GENERATED by [msw-auto-mock](https://github.com/zoubingwu/msw-auto-mock)
 * Feel free to commit/edit it as you need.
 */
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { HttpResponse, http } from "msw";
import { faker } from "@faker-js/faker";

faker.seed(1);

const baseURL = "";
const MAX_ARRAY_LENGTH = 20;

// Map to store counters for each API endpoint
const apiCounters = new Map();

const next = (apiKey) => {
  let currentCount = apiCounters.get(apiKey) ?? 0;
  if (currentCount === Number.MAX_SAFE_INTEGER - 1) {
    currentCount = 0;
  }
  apiCounters.set(apiKey, currentCount + 1);
  return currentCount;
};

export const handlers = [
  http.get(`${baseURL}/healthcheck`, async () => {
    const resultArray = [
      [getGetHealthcheck200Response(), { status: 200 }],
      [getGetHealthcheck500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /healthcheck`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/areas/hierarchies`, async () => {
    const resultArray = [
      [getGetAreaHierarchies200Response(), { status: 200 }],
      [getGetAreaHierarchies500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /areas/hierarchies`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/areas/areatypes`, async () => {
    const resultArray = [
      [getGetAreaTypes200Response(), { status: 200 }],
      [getGetAreaTypes500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /areas/areatypes`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/areas/areatypes/:areaTypeKey/areas`, async () => {
    const resultArray = [
      [getGetAreaTypeMembers200Response(), { status: 200 }],
      [getGetAreaTypeMembers404Response(), { status: 404 }],
      [getGetAreaTypeMembers500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /areas/areatypes/:areaTypeKey/areas`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/areas/:areaCode`, async () => {
    const resultArray = [
      [getGetArea200Response(), { status: 200 }],
      [getGetArea404Response(), { status: 404 }],
      [getGetArea500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /areas/:areaCode`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/areas/root`, async () => {
    const resultArray = [
      [getGetAreaRoot200Response(), { status: 200 }],
      [getGetAreaRoot500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /areas/root`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/areas`, async () => {
    const resultArray = [
      [getGetAreas200Response(), { status: 200 }],
      [getGetAreas400Response(), { status: 400 }],
      [getGetAreas404Response(), { status: 404 }],
      [getGetAreas500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /areas`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/indicators`, async () => {
    const resultArray = [
      [getFilterIndicators200Response(), { status: 200 }],
      [getFilterIndicators400Response(), { status: 400 }],
      [getFilterIndicators500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /indicators`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/indicators/:indicatorId`, async () => {
    const resultArray = [
      [getGetIndicator200Response(), { status: 200 }],
      [getGetIndicator404Response(), { status: 404 }],
      [getGetIndicator500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /indicators/:indicatorId`) % resultArray.length],
    );
  }),
  http.get(`${baseURL}/indicators/:indicatorId/data`, async () => {
    const resultArray = [
      [getGetHealthDataForAnIndicator200Response(), { status: 200 }],
      [getGetHealthDataForAnIndicator400Response(), { status: 400 }],
      [getGetHealthDataForAnIndicator500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`get /indicators/:indicatorId/data`) % resultArray.length
      ],
    );
  }),
  http.post(`${baseURL}/indicators/:indicatorId/data`, async () => {
    const resultArray = [
      [getPostIndicatorsIndicatorIdData501Response(), { status: 501 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`post /indicators/:indicatorId/data`) % resultArray.length
      ],
    );
  }),
  http.delete(`${baseURL}/indicators/:indicatorId/data`, async () => {
    const resultArray = [
      [getDeleteIndicatorsIndicatorIdData501Response(), { status: 501 }],
    ];

    return HttpResponse.json(
      ...resultArray[
        next(`delete /indicators/:indicatorId/data`) % resultArray.length
      ],
    );
  }),
  http.get(`${baseURL}/indicators/quartiles`, async () => {
    const resultArray = [
      [getGetIndicatorsQuartiles200Response(), { status: 200 }],
      [getGetIndicatorsQuartiles400Response(), { status: 400 }],
      [getGetIndicatorsQuartiles500Response(), { status: 500 }],
    ];

    return HttpResponse.json(
      ...resultArray[next(`get /indicators/quartiles`) % resultArray.length],
    );
  }),
];

export function getGetHealthcheck200Response() {
  return {
    status: "Healthy",
  };
}

export function getGetHealthcheck500Response() {
  return {
    status: "Unhealthy",
    message: "API is experiencing issues",
  };
}

export function getGetAreaHierarchies200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => faker.lorem.words());
}

export function getGetAreaHierarchies500Response() {
  return {
    message: faker.lorem.words(),
  };
}

export function getGetAreaTypes200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    key: "combined-authorities",
    name: "Combined Authorities",
    level: "3",
    hierarchyName: "NHS",
  }));
}

export function getGetAreaTypes500Response() {
  return {
    message: faker.lorem.words(),
  };
}

export function getGetAreaTypeMembers200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    code: "E06000047",
    name: "County Durham",
    areaType: {
      key: "combined-authorities",
      name: "Combined Authorities",
      level: "3",
      hierarchyName: "NHS",
    },
  }));
}

export function getGetAreaTypeMembers404Response() {
  return {
    message: faker.lorem.words(),
  };
}

export function getGetAreaTypeMembers500Response() {
  return {
    message: faker.lorem.words(),
  };
}

export function getGetArea200Response() {
  return {
    code: "E06000047",
    name: "County Durham",
    areaType: {
      key: "combined-authorities",
      name: "Combined Authorities",
      level: "3",
      hierarchyName: "NHS",
    },
    parents: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      code: "E06000047",
      name: "County Durham",
      areaType: {
        key: "combined-authorities",
        name: "Combined Authorities",
        level: "3",
        hierarchyName: "NHS",
      },
    })),
    children: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      code: "E06000047",
      name: "County Durham",
      areaType: {
        key: "combined-authorities",
        name: "Combined Authorities",
        level: "3",
        hierarchyName: "NHS",
      },
    })),
    siblings: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      code: "E06000047",
      name: "County Durham",
      areaType: {
        key: "combined-authorities",
        name: "Combined Authorities",
        level: "3",
        hierarchyName: "NHS",
      },
    })),
  };
}

export function getGetArea404Response() {
  return {
    message: faker.lorem.words(),
  };
}

export function getGetArea500Response() {
  return {
    message: faker.lorem.words(),
  };
}

export function getGetAreaRoot200Response() {
  return {
    code: "E92000001",
    name: "England",
  };
}

export function getGetAreaRoot500Response() {
  return {
    message: faker.lorem.words(),
  };
}

export function getGetAreas200Response() {
  return [...new Array(faker.number.int({ min: 1, max: 300 })).keys()].map(
    (_) => ({
      code: "E06000047",
      name: "County Durham",
      areaType: {
        key: "combined-authorities",
        name: "Combined Authorities",
        level: "3",
        hierarchyName: "NHS",
      },
    }),
  );
}

export function getGetAreas400Response() {
  return {
    message: faker.lorem.words(),
  };
}

export function getGetAreas404Response() {
  return {
    message: faker.lorem.words(),
  };
}

export function getGetAreas500Response() {
  return {
    message: faker.lorem.words(),
  };
}

export function getFilterIndicators200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    indicator_id: 3456,
    title: "Hypertension: QOF prevalence (all ages)",
  }));
}

export function getFilterIndicators400Response() {
  return {
    message: faker.lorem.words(),
  };
}

export function getFilterIndicators500Response() {
  return {
    message: faker.lorem.words(),
  };
}

export function getGetIndicator200Response() {
  return {
    indicator_id: 3456,
    title: "Hypertension: QOF prevalence (all ages)",
    definition:
      "The percentage of patients with established hypertension, as recorded on practice disease registers (proportion of total list size)",
  };
}

export function getGetIndicator404Response() {
  return {
    message: faker.lorem.words(),
  };
}

export function getGetIndicator500Response() {
  return {
    message: faker.lorem.words(),
  };
}

export function getGetHealthDataForAnIndicator200Response() {
  return {
    indicatorId: 21404,
    name: "Emergency readmissions within 30 days of discharge from hospital",
    polarity: faker.helpers.arrayElement([
      "Unknown",
      "NoJudgement",
      "LowIsGood",
      "HighIsGood",
    ]),
    benchmarkMethod: "CIOverlappingReferenceValue95",
    areaHealthData: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      areaCode: "E92000001",
      areaName: "England",
      healthData: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH }),
        ).keys(),
      ].map((_) => ({
        year: 2023,
        count: 222,
        value: 506.60912,
        lowerCi: 441.69151,
        upperCi: 578.32766,
        ageBand: {
          value: "0-4",
          isAggregate: faker.datatype.boolean(),
        },
        sex: {
          value: "Female",
          isAggregate: faker.datatype.boolean(),
        },
        trend: "Increasing",
        isAggregate: faker.datatype.boolean(),
        benchmarkComparison: {
          outcome: "Lower",
          benchmarkAreaCode: "E92000001",
          benchmarkAreaName: "England",
          benchmarkValue: 123.5,
        },
        deprivation: {
          sequence: 2,
          value: "Second most deprived decile",
          type: "District & UA deprivation deciles in England (IMD2019, 4/21 geography)",
          isAggregate: faker.datatype.boolean(),
        },
      })),
    })),
  };
}

export function getGetHealthDataForAnIndicator400Response() {
  return {
    message: faker.lorem.words(),
  };
}

export function getGetHealthDataForAnIndicator500Response() {
  return {
    message: faker.lorem.words(),
  };
}

export function getPostIndicatorsIndicatorIdData501Response() {
  return null;
}

export function getDeleteIndicatorsIndicatorIdData501Response() {
  return null;
}

export function getGetIndicatorsQuartiles200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    indicatorId: 21404,
    year: 2023,
    polarity: faker.helpers.arrayElement([
      "Unknown",
      "NoJudgement",
      "LowIsGood",
      "HighIsGood",
    ]),
    q0Value: faker.number.int(),
    q1Value: faker.number.int(),
    q2Value: faker.number.int(),
    q3Value: faker.number.int(),
    q4Value: faker.number.int(),
    areaValue: faker.number.int(),
    ancestorValue: faker.number.int(),
    englandValue: faker.number.int(),
  }));
}

export function getGetIndicatorsQuartiles400Response() {
  return {
    message: faker.lorem.words(),
  };
}

export function getGetIndicatorsQuartiles500Response() {
  return {
    message: faker.lorem.words(),
  };
}
