/* tslint:disable */
/* eslint-disable */
/**
 * DHSC.FingertipsNext.Api | v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface GetHealthCheckRequest {
    apiVersion?: string;
    xVersion?: string;
}

/**
 * HealthCheckApi - interface
 * 
 * @export
 * @interface HealthCheckApiInterface
 */
export interface HealthCheckApiInterface {
    /**
     * 
     * @param {string} [apiVersion] 
     * @param {string} [xVersion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthCheckApiInterface
     */
    getHealthCheckRaw(requestParameters: GetHealthCheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>>;

    /**
     */
    getHealthCheck(requestParameters: GetHealthCheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean>;

}

/**
 * 
 */
export class HealthCheckApi extends runtime.BaseAPI implements HealthCheckApiInterface {

    /**
     */
    async getHealthCheckRaw(requestParameters: GetHealthCheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        if (requestParameters['apiVersion'] != null) {
            queryParameters['api-version'] = requestParameters['apiVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xVersion'] != null) {
            headerParameters['X-Version'] = String(requestParameters['xVersion']);
        }

        const response = await this.request({
            path: `/HealthCheck`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async getHealthCheck(requestParameters: GetHealthCheckRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.getHealthCheckRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
