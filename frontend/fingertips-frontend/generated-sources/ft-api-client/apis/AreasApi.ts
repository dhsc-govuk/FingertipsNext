/* tslint:disable */
/* eslint-disable */
/**
 * Fingertips API
 * An API to query public health indicator data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ProfileFeedback@dhsc.gov.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Area,
  AreaType,
  AreaWithRelations,
  GetAreaHierarchies500Response,
  RootArea,
} from '../models/index';
import {
    AreaFromJSON,
    AreaToJSON,
    AreaTypeFromJSON,
    AreaTypeToJSON,
    AreaWithRelationsFromJSON,
    AreaWithRelationsToJSON,
    GetAreaHierarchies500ResponseFromJSON,
    GetAreaHierarchies500ResponseToJSON,
    RootAreaFromJSON,
    RootAreaToJSON,
} from '../models/index';

export interface GetAreaRequest {
    areaCode: string;
    includeChildren?: boolean;
    includeSiblings?: boolean;
    includeAncestors?: boolean;
    childAreaType?: string;
}

export interface GetAreaTypeMembersRequest {
    areaType: string;
}

export interface GetAreaTypesRequest {
    hierarchyType?: string;
}

/**
 * AreasApi - interface
 * 
 * @export
 * @interface AreasApiInterface
 */
export interface AreasApiInterface {
    /**
     * Get the full details of a given area, including it\'s parent, optionally including it\'s children, siblings, cousins and ancestors
     * @summary Get area
     * @param {string} areaCode The area code of the area/ geography
     * @param {boolean} [includeChildren] include the child areas
     * @param {boolean} [includeSiblings] include the sibling areas
     * @param {boolean} [includeAncestors] include the ancestor areas
     * @param {string} [childAreaType] the area_type of descendants to be returned
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AreasApiInterface
     */
    getAreaRaw(requestParameters: GetAreaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AreaWithRelations>>;

    /**
     * Get the full details of a given area, including it\'s parent, optionally including it\'s children, siblings, cousins and ancestors
     * Get area
     */
    getArea(requestParameters: GetAreaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AreaWithRelations>;

    /**
     * Get all available hierarchy types
     * @summary Get hierarchies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AreasApiInterface
     */
    getAreaHierarchiesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>>;

    /**
     * Get all available hierarchy types
     * Get hierarchies
     */
    getAreaHierarchies(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>>;

    /**
     * Get the root node of the area hierarchy
     * @summary Get root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AreasApiInterface
     */
    getAreaRootRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RootArea>>;

    /**
     * Get the root node of the area hierarchy
     * Get root
     */
    getAreaRoot(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RootArea>;

    /**
     * Get the areas that have a given area type
     * @summary Get member areas for an area type
     * @param {string} areaType The area type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AreasApiInterface
     */
    getAreaTypeMembersRaw(requestParameters: GetAreaTypeMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Area>>>;

    /**
     * Get the areas that have a given area type
     * Get member areas for an area type
     */
    getAreaTypeMembers(requestParameters: GetAreaTypeMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Area>>;

    /**
     * Get area types, optionally filtering by hierarchy type
     * @summary Get area types
     * @param {string} [hierarchyType] The name of the hierarchy type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AreasApiInterface
     */
    getAreaTypesRaw(requestParameters: GetAreaTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AreaType>>>;

    /**
     * Get area types, optionally filtering by hierarchy type
     * Get area types
     */
    getAreaTypes(requestParameters: GetAreaTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AreaType>>;

}

/**
 * 
 */
export class AreasApi extends runtime.BaseAPI implements AreasApiInterface {

    /**
     * Get the full details of a given area, including it\'s parent, optionally including it\'s children, siblings, cousins and ancestors
     * Get area
     */
    async getAreaRaw(requestParameters: GetAreaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AreaWithRelations>> {
        if (requestParameters['areaCode'] == null) {
            throw new runtime.RequiredError(
                'areaCode',
                'Required parameter "areaCode" was null or undefined when calling getArea().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includeChildren'] != null) {
            queryParameters['include_children'] = requestParameters['includeChildren'];
        }

        if (requestParameters['includeSiblings'] != null) {
            queryParameters['include_siblings'] = requestParameters['includeSiblings'];
        }

        if (requestParameters['includeAncestors'] != null) {
            queryParameters['include_ancestors'] = requestParameters['includeAncestors'];
        }

        if (requestParameters['childAreaType'] != null) {
            queryParameters['child_area_type'] = requestParameters['childAreaType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/areas/{area_code}`.replace(`{${"area_code"}}`, encodeURIComponent(String(requestParameters['areaCode']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AreaWithRelationsFromJSON(jsonValue));
    }

    /**
     * Get the full details of a given area, including it\'s parent, optionally including it\'s children, siblings, cousins and ancestors
     * Get area
     */
    async getArea(requestParameters: GetAreaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AreaWithRelations> {
        const response = await this.getAreaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all available hierarchy types
     * Get hierarchies
     */
    async getAreaHierarchiesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/areas/hierarchies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get all available hierarchy types
     * Get hierarchies
     */
    async getAreaHierarchies(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getAreaHierarchiesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the root node of the area hierarchy
     * Get root
     */
    async getAreaRootRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RootArea>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/areas/root`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RootAreaFromJSON(jsonValue));
    }

    /**
     * Get the root node of the area hierarchy
     * Get root
     */
    async getAreaRoot(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RootArea> {
        const response = await this.getAreaRootRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the areas that have a given area type
     * Get member areas for an area type
     */
    async getAreaTypeMembersRaw(requestParameters: GetAreaTypeMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Area>>> {
        if (requestParameters['areaType'] == null) {
            throw new runtime.RequiredError(
                'areaType',
                'Required parameter "areaType" was null or undefined when calling getAreaTypeMembers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/areas/areatypes/{area_type}/areas`.replace(`{${"area_type"}}`, encodeURIComponent(String(requestParameters['areaType']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AreaFromJSON));
    }

    /**
     * Get the areas that have a given area type
     * Get member areas for an area type
     */
    async getAreaTypeMembers(requestParameters: GetAreaTypeMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Area>> {
        const response = await this.getAreaTypeMembersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get area types, optionally filtering by hierarchy type
     * Get area types
     */
    async getAreaTypesRaw(requestParameters: GetAreaTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AreaType>>> {
        const queryParameters: any = {};

        if (requestParameters['hierarchyType'] != null) {
            queryParameters['hierarchy_type'] = requestParameters['hierarchyType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/areas/areatypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AreaTypeFromJSON));
    }

    /**
     * Get area types, optionally filtering by hierarchy type
     * Get area types
     */
    async getAreaTypes(requestParameters: GetAreaTypesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AreaType>> {
        const response = await this.getAreaTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
