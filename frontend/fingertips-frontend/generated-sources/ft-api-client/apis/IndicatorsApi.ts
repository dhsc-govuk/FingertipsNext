/* tslint:disable */
/* eslint-disable */
/**
 * Fingertips API
 * An API to query public health indicator data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ProfileFeedback@dhsc.gov.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetAreaHierarchies500Response,
  HealthDataForArea,
  Indicator,
  IndicatorSummary,
} from '../models/index';
import {
    GetAreaHierarchies500ResponseFromJSON,
    GetAreaHierarchies500ResponseToJSON,
    HealthDataForAreaFromJSON,
    HealthDataForAreaToJSON,
    IndicatorFromJSON,
    IndicatorToJSON,
    IndicatorSummaryFromJSON,
    IndicatorSummaryToJSON,
} from '../models/index';

export interface FilterIndicatorsRequest {
    indicatorIds?: Array<number>;
}

export interface GetHealthDataForAnIndicatorRequest {
    indicatorId: number;
    areaCodes?: Array<string>;
    years?: Array<number>;
}

export interface GetIndicatorRequest {
    indicatorId: number;
}

/**
 * IndicatorsApi - interface
 * 
 * @export
 * @interface IndicatorsApiInterface
 */
export interface IndicatorsApiInterface {
    /**
     * Get summaries of public health indicators, by passing in the appropriate options you can filter the results 
     * @summary Get indicator summaries & filter results
     * @param {Array<number>} [indicatorIds] A list of indicator_ids, up to 10 can be requested
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndicatorsApiInterface
     */
    filterIndicatorsRaw(requestParameters: FilterIndicatorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IndicatorSummary>>>;

    /**
     * Get summaries of public health indicators, by passing in the appropriate options you can filter the results 
     * Get indicator summaries & filter results
     */
    filterIndicators(requestParameters: FilterIndicatorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IndicatorSummary>>;

    /**
     * Get data for a public health indicator. This will return all data for all areas and all years for the indicators. Optionally filter the results by supplying one or more area codes and one or more years in the query string.
     * @summary Get health data for an indicator
     * @param {number} indicatorId The unique identifier of the indicator
     * @param {Array<string>} [areaCodes] A list of area codes, up to 10 area codes can be requested
     * @param {Array<number>} [years] A list of years, up to 10 years can be requested
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndicatorsApiInterface
     */
    getHealthDataForAnIndicatorRaw(requestParameters: GetHealthDataForAnIndicatorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<HealthDataForArea>>>;

    /**
     * Get data for a public health indicator. This will return all data for all areas and all years for the indicators. Optionally filter the results by supplying one or more area codes and one or more years in the query string.
     * Get health data for an indicator
     */
    getHealthDataForAnIndicator(requestParameters: GetHealthDataForAnIndicatorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<HealthDataForArea>>;

    /**
     * Fetches details of a specific indicator by its unique identifier. The response includes the indicator\'s metadata 
     * @summary Get indicator
     * @param {number} indicatorId The unique identifier of the indicator
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndicatorsApiInterface
     */
    getIndicatorRaw(requestParameters: GetIndicatorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Indicator>>;

    /**
     * Fetches details of a specific indicator by its unique identifier. The response includes the indicator\'s metadata 
     * Get indicator
     */
    getIndicator(requestParameters: GetIndicatorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Indicator>;

}

/**
 * 
 */
export class IndicatorsApi extends runtime.BaseAPI implements IndicatorsApiInterface {

    /**
     * Get summaries of public health indicators, by passing in the appropriate options you can filter the results 
     * Get indicator summaries & filter results
     */
    async filterIndicatorsRaw(requestParameters: FilterIndicatorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<IndicatorSummary>>> {
        const queryParameters: any = {};

        if (requestParameters['indicatorIds'] != null) {
            queryParameters['indicator_ids'] = requestParameters['indicatorIds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/indicators`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(IndicatorSummaryFromJSON));
    }

    /**
     * Get summaries of public health indicators, by passing in the appropriate options you can filter the results 
     * Get indicator summaries & filter results
     */
    async filterIndicators(requestParameters: FilterIndicatorsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<IndicatorSummary>> {
        const response = await this.filterIndicatorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get data for a public health indicator. This will return all data for all areas and all years for the indicators. Optionally filter the results by supplying one or more area codes and one or more years in the query string.
     * Get health data for an indicator
     */
    async getHealthDataForAnIndicatorRaw(requestParameters: GetHealthDataForAnIndicatorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<HealthDataForArea>>> {
        if (requestParameters['indicatorId'] == null) {
            throw new runtime.RequiredError(
                'indicatorId',
                'Required parameter "indicatorId" was null or undefined when calling getHealthDataForAnIndicator().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['areaCodes'] != null) {
            queryParameters['area_codes'] = requestParameters['areaCodes'];
        }

        if (requestParameters['years'] != null) {
            queryParameters['years'] = requestParameters['years'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/indicators/{indicator_id}/data`.replace(`{${"indicator_id"}}`, encodeURIComponent(String(requestParameters['indicatorId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HealthDataForAreaFromJSON));
    }

    /**
     * Get data for a public health indicator. This will return all data for all areas and all years for the indicators. Optionally filter the results by supplying one or more area codes and one or more years in the query string.
     * Get health data for an indicator
     */
    async getHealthDataForAnIndicator(requestParameters: GetHealthDataForAnIndicatorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<HealthDataForArea>> {
        const response = await this.getHealthDataForAnIndicatorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches details of a specific indicator by its unique identifier. The response includes the indicator\'s metadata 
     * Get indicator
     */
    async getIndicatorRaw(requestParameters: GetIndicatorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Indicator>> {
        if (requestParameters['indicatorId'] == null) {
            throw new runtime.RequiredError(
                'indicatorId',
                'Required parameter "indicatorId" was null or undefined when calling getIndicator().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/indicators/{indicator_id}`.replace(`{${"indicator_id"}}`, encodeURIComponent(String(requestParameters['indicatorId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndicatorFromJSON(jsonValue));
    }

    /**
     * Fetches details of a specific indicator by its unique identifier. The response includes the indicator\'s metadata 
     * Get indicator
     */
    async getIndicator(requestParameters: GetIndicatorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Indicator> {
        const response = await this.getIndicatorRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
