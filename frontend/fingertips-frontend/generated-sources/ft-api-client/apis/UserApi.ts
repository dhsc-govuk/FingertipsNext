/* tslint:disable */
/* eslint-disable */
/**
 * Fingertips API
 * An API to query public health indicator data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ProfileFeedback@dhsc.gov.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetAreaHierarchies500Response,
  UserInfoType,
} from '../models/index';
import {
    GetAreaHierarchies500ResponseFromJSON,
    GetAreaHierarchies500ResponseToJSON,
    UserInfoTypeFromJSON,
    UserInfoTypeToJSON,
} from '../models/index';

export interface CheckIndicatorPermissionsRequest {
    indicatorId: number;
}

/**
 * UserApi - interface
 * 
 * @export
 * @interface UserApiInterface
 */
export interface UserApiInterface {
    /**
     * Queries against a specified indicator id. Return success if the user has administrative permission for the indicator. 403 if the user does not.
     * @summary Check Indicator Permissions
     * @param {number} indicatorId ID of the indicator to query against
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    checkIndicatorPermissionsRaw(requestParameters: CheckIndicatorPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Queries against a specified indicator id. Return success if the user has administrative permission for the indicator. 403 if the user does not.
     * Check Indicator Permissions
     */
    checkIndicatorPermissions(requestParameters: CheckIndicatorPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Get info for logged in user
     * @summary Get User Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    getUserInfoRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserInfoType>>;

    /**
     * Get info for logged in user
     * Get User Info
     */
    getUserInfo(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserInfoType>;

}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI implements UserApiInterface {

    /**
     * Queries against a specified indicator id. Return success if the user has administrative permission for the indicator. 403 if the user does not.
     * Check Indicator Permissions
     */
    async checkIndicatorPermissionsRaw(requestParameters: CheckIndicatorPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['indicatorId'] == null) {
            throw new runtime.RequiredError(
                'indicatorId',
                'Required parameter "indicatorId" was null or undefined when calling checkIndicatorPermissions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/indicator/{indicator_id}`.replace(`{${"indicator_id"}}`, encodeURIComponent(String(requestParameters['indicatorId']))),
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Queries against a specified indicator id. Return success if the user has administrative permission for the indicator. 403 if the user does not.
     * Check Indicator Permissions
     */
    async checkIndicatorPermissions(requestParameters: CheckIndicatorPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.checkIndicatorPermissionsRaw(requestParameters, initOverrides);
    }

    /**
     * Get info for logged in user
     * Get User Info
     */
    async getUserInfoRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserInfoType>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user/info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserInfoTypeFromJSON(jsonValue));
    }

    /**
     * Get info for logged in user
     * Get User Info
     */
    async getUserInfo(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserInfoType> {
        const response = await this.getUserInfoRaw(initOverrides);
        return await response.value();
    }

}
