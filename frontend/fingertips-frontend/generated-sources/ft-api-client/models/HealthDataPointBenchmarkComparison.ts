/* tslint:disable */
/* eslint-disable */
/**
 * Fingertips API
 * An API to query public health indicator data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ProfileFeedback@dhsc.gov.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BenchmarkOutcome } from './BenchmarkOutcome';
import {
    BenchmarkOutcomeFromJSON,
    BenchmarkOutcomeFromJSONTyped,
    BenchmarkOutcomeToJSON,
    BenchmarkOutcomeToJSONTyped,
} from './BenchmarkOutcome';
import type { BenchmarkComparisonMethod } from './BenchmarkComparisonMethod';
import {
    BenchmarkComparisonMethodFromJSON,
    BenchmarkComparisonMethodFromJSONTyped,
    BenchmarkComparisonMethodToJSON,
    BenchmarkComparisonMethodToJSONTyped,
} from './BenchmarkComparisonMethod';

/**
 * 
 * @export
 * @interface HealthDataPointBenchmarkComparison
 */
export interface HealthDataPointBenchmarkComparison {
    /**
     * 
     * @type {BenchmarkOutcome}
     * @memberof HealthDataPointBenchmarkComparison
     */
    outcome?: BenchmarkOutcome;
    /**
     * 
     * @type {BenchmarkComparisonMethod}
     * @memberof HealthDataPointBenchmarkComparison
     */
    method?: BenchmarkComparisonMethod;
    /**
     * the type of polarity applied to the outcome
     * @type {string}
     * @memberof HealthDataPointBenchmarkComparison
     */
    indicatorPolarity?: HealthDataPointBenchmarkComparisonIndicatorPolarityEnum;
    /**
     * The code of the benchmark area
     * @type {string}
     * @memberof HealthDataPointBenchmarkComparison
     */
    benchmarkAreaCode?: string;
    /**
     * The name of the benchmark area
     * @type {string}
     * @memberof HealthDataPointBenchmarkComparison
     */
    benchmarkAreaName?: string;
    /**
     * The value used in the comparison
     * @type {number}
     * @memberof HealthDataPointBenchmarkComparison
     */
    benchmarkValue?: number;
}


/**
 * @export
 */
export const HealthDataPointBenchmarkComparisonIndicatorPolarityEnum = {
    NoJudgement: 'NoJudgement',
    LowIsGood: 'LowIsGood',
    HighIsGood: 'HighIsGood'
} as const;
export type HealthDataPointBenchmarkComparisonIndicatorPolarityEnum = typeof HealthDataPointBenchmarkComparisonIndicatorPolarityEnum[keyof typeof HealthDataPointBenchmarkComparisonIndicatorPolarityEnum];


/**
 * Check if a given object implements the HealthDataPointBenchmarkComparison interface.
 */
export function instanceOfHealthDataPointBenchmarkComparison(value: object): value is HealthDataPointBenchmarkComparison {
    return true;
}

export function HealthDataPointBenchmarkComparisonFromJSON(json: any): HealthDataPointBenchmarkComparison {
    return HealthDataPointBenchmarkComparisonFromJSONTyped(json, false);
}

export function HealthDataPointBenchmarkComparisonFromJSONTyped(json: any, ignoreDiscriminator: boolean): HealthDataPointBenchmarkComparison {
    if (json == null) {
        return json;
    }
    return {
        
        'outcome': json['outcome'] == null ? undefined : BenchmarkOutcomeFromJSON(json['outcome']),
        'method': json['method'] == null ? undefined : BenchmarkComparisonMethodFromJSON(json['method']),
        'indicatorPolarity': json['indicatorPolarity'] == null ? undefined : json['indicatorPolarity'],
        'benchmarkAreaCode': json['benchmarkAreaCode'] == null ? undefined : json['benchmarkAreaCode'],
        'benchmarkAreaName': json['benchmarkAreaName'] == null ? undefined : json['benchmarkAreaName'],
        'benchmarkValue': json['benchmarkValue'] == null ? undefined : json['benchmarkValue'],
    };
}

export function HealthDataPointBenchmarkComparisonToJSON(json: any): HealthDataPointBenchmarkComparison {
    return HealthDataPointBenchmarkComparisonToJSONTyped(json, false);
}

export function HealthDataPointBenchmarkComparisonToJSONTyped(value?: HealthDataPointBenchmarkComparison | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'outcome': BenchmarkOutcomeToJSON(value['outcome']),
        'method': BenchmarkComparisonMethodToJSON(value['method']),
        'indicatorPolarity': value['indicatorPolarity'],
        'benchmarkAreaCode': value['benchmarkAreaCode'],
        'benchmarkAreaName': value['benchmarkAreaName'],
        'benchmarkValue': value['benchmarkValue'],
    };
}

