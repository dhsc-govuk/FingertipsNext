/* tslint:disable */
/* eslint-disable */
/**
 * Fingertips API
 * An API to query public health indicator data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ProfileFeedback@dhsc.gov.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DatePeriod } from './DatePeriod';
import {
    DatePeriodFromJSON,
    DatePeriodFromJSONTyped,
    DatePeriodToJSON,
    DatePeriodToJSONTyped,
} from './DatePeriod';
import type { Frequency } from './Frequency';
import {
    FrequencyFromJSON,
    FrequencyFromJSONTyped,
    FrequencyToJSON,
    FrequencyToJSONTyped,
} from './Frequency';
import type { IndicatorPolarity } from './IndicatorPolarity';
import {
    IndicatorPolarityFromJSON,
    IndicatorPolarityFromJSONTyped,
    IndicatorPolarityToJSON,
    IndicatorPolarityToJSONTyped,
} from './IndicatorPolarity';

/**
 * Quartile data for an indicator plus supporting information
 * @export
 * @interface QuartileData
 */
export interface QuartileData {
    /**
     * Unique ID of the indicator
     * @type {number}
     * @memberof QuartileData
     */
    indicatorId?: number;
    /**
     * 
     * @type {SexData}
     * @memberof QuartileData
     */
    sex?: SexData;
    /**
     * Indicates if the segment is the aggregate.
     * @type {boolean}
     * @memberof QuartileData
     */
    isAggregate?: boolean;
    /**
     * The year that the data point is for
     * @type {number}
     * @memberof QuartileData
     */
    year?: number;
    /**
     * 
     * @type {DatePeriod}
     * @memberof QuartileData
     */
    datePeriod?: DatePeriod;
    /**
     * 
     * @type {IndicatorPolarity}
     * @memberof QuartileData
     */
    polarity?: IndicatorPolarity;
    /**
     * 
     * @type {Frequency}
     * @memberof QuartileData
     */
    frequency?: Frequency;
    /**
     * Quartile Q0 value - the minimum value
     * @type {number}
     * @memberof QuartileData
     */
    q0Value?: number;
    /**
     * Quartile Q1 value - the lower quartile value
     * @type {number}
     * @memberof QuartileData
     */
    q1Value?: number;
    /**
     * Quartile Q2 value - the median value
     * @type {number}
     * @memberof QuartileData
     */
    q2Value?: number;
    /**
     * Quartile Q3 value - the upper quartile value
     * @type {number}
     * @memberof QuartileData
     */
    q3Value?: number;
    /**
     * Quartile Q4 value - the maximum value
     * @type {number}
     * @memberof QuartileData
     */
    q4Value?: number;
    /**
     * the average value for the area requested for comparison
     * @type {number}
     * @memberof QuartileData
     */
    areaValue?: number;
    /**
     * the average value for the ancestor area requested for comparison
     * @type {number}
     * @memberof QuartileData
     */
    ancestorValue?: number;
    /**
     * the average value for England for comparison
     * @type {number}
     * @memberof QuartileData
     */
    englandValue?: number;
}



/**
 * Check if a given object implements the QuartileData interface.
 */
export function instanceOfQuartileData(value: object): value is QuartileData {
    return true;
}

export function QuartileDataFromJSON(json: any): QuartileData {
    return QuartileDataFromJSONTyped(json, false);
}

export function QuartileDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuartileData {
    if (json == null) {
        return json;
    }
    return {
        
        'indicatorId': json['indicatorId'] == null ? undefined : json['indicatorId'],
        'year': json['year'] == null ? undefined : json['year'],
        'datePeriod': json['datePeriod'] == null ? undefined : DatePeriodFromJSON(json['datePeriod']),
        'polarity': json['polarity'] == null ? undefined : IndicatorPolarityFromJSON(json['polarity']),
        'frequency': json['frequency'] == null ? undefined : FrequencyFromJSON(json['frequency']),
        'q0Value': json['q0Value'] == null ? undefined : json['q0Value'],
        'q1Value': json['q1Value'] == null ? undefined : json['q1Value'],
        'q2Value': json['q2Value'] == null ? undefined : json['q2Value'],
        'q3Value': json['q3Value'] == null ? undefined : json['q3Value'],
        'q4Value': json['q4Value'] == null ? undefined : json['q4Value'],
        'areaValue': json['areaValue'] == null ? undefined : json['areaValue'],
        'ancestorValue': json['ancestorValue'] == null ? undefined : json['ancestorValue'],
        'englandValue': json['englandValue'] == null ? undefined : json['englandValue'],
    };
}

export function QuartileDataToJSON(json: any): QuartileData {
    return QuartileDataToJSONTyped(json, false);
}

export function QuartileDataToJSONTyped(value?: QuartileData | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'indicatorId': value['indicatorId'],
        'year': value['year'],
        'datePeriod': DatePeriodToJSON(value['datePeriod']),
        'polarity': IndicatorPolarityToJSON(value['polarity']),
        'frequency': FrequencyToJSON(value['frequency']),
        'q0Value': value['q0Value'],
        'q1Value': value['q1Value'],
        'q2Value': value['q2Value'],
        'q3Value': value['q3Value'],
        'q4Value': value['q4Value'],
        'areaValue': value['areaValue'],
        'ancestorValue': value['ancestorValue'],
        'englandValue': value['englandValue'],
    };
}

