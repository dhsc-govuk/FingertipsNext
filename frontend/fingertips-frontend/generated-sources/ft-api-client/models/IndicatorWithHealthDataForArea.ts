/* tslint:disable */
/* eslint-disable */
/**
 * Fingertips API
 * An API to query public health indicator data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ProfileFeedback@dhsc.gov.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { HealthDataForArea } from './HealthDataForArea';
import {
    HealthDataForAreaFromJSON,
    HealthDataForAreaFromJSONTyped,
    HealthDataForAreaToJSON,
    HealthDataForAreaToJSONTyped,
} from './HealthDataForArea';
import type { BenchmarkComparisonMethod } from './BenchmarkComparisonMethod';
import {
    BenchmarkComparisonMethodFromJSON,
    BenchmarkComparisonMethodFromJSONTyped,
    BenchmarkComparisonMethodToJSON,
    BenchmarkComparisonMethodToJSONTyped,
} from './BenchmarkComparisonMethod';
import type { IndicatorPolarity } from './IndicatorPolarity';
import {
    IndicatorPolarityFromJSON,
    IndicatorPolarityFromJSONTyped,
    IndicatorPolarityToJSON,
    IndicatorPolarityToJSONTyped,
} from './IndicatorPolarity';

/**
 * Indicator information with area health data
 * @export
 * @interface IndicatorWithHealthDataForArea
 */
export interface IndicatorWithHealthDataForArea {
    /**
     * Name of the indicator
     * @type {string}
     * @memberof IndicatorWithHealthDataForArea
     */
    name?: string;
    /**
     * 
     * @type {IndicatorPolarity}
     * @memberof IndicatorWithHealthDataForArea
     */
    polarity?: IndicatorPolarity;
    /**
     * 
     * @type {BenchmarkComparisonMethod}
     * @memberof IndicatorWithHealthDataForArea
     */
    benchmarkMethod?: BenchmarkComparisonMethod;
    /**
     * 
     * @type {Array<HealthDataForArea>}
     * @memberof IndicatorWithHealthDataForArea
     */
    areaHealthData?: Array<HealthDataForArea>;
}



/**
 * Check if a given object implements the IndicatorWithHealthDataForArea interface.
 */
export function instanceOfIndicatorWithHealthDataForArea(value: object): value is IndicatorWithHealthDataForArea {
    return true;
}

export function IndicatorWithHealthDataForAreaFromJSON(json: any): IndicatorWithHealthDataForArea {
    return IndicatorWithHealthDataForAreaFromJSONTyped(json, false);
}

export function IndicatorWithHealthDataForAreaFromJSONTyped(json: any, ignoreDiscriminator: boolean): IndicatorWithHealthDataForArea {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'] == null ? undefined : json['name'],
        'polarity': json['polarity'] == null ? undefined : IndicatorPolarityFromJSON(json['polarity']),
        'benchmarkMethod': json['benchmarkMethod'] == null ? undefined : BenchmarkComparisonMethodFromJSON(json['benchmarkMethod']),
        'areaHealthData': json['areaHealthData'] == null ? undefined : ((json['areaHealthData'] as Array<any>).map(HealthDataForAreaFromJSON)),
    };
}

export function IndicatorWithHealthDataForAreaToJSON(json: any): IndicatorWithHealthDataForArea {
    return IndicatorWithHealthDataForAreaToJSONTyped(json, false);
}

export function IndicatorWithHealthDataForAreaToJSONTyped(value?: IndicatorWithHealthDataForArea | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'polarity': IndicatorPolarityToJSON(value['polarity']),
        'benchmarkMethod': BenchmarkComparisonMethodToJSON(value['benchmarkMethod']),
        'areaHealthData': value['areaHealthData'] == null ? undefined : ((value['areaHealthData'] as Array<any>).map(HealthDataForAreaToJSON)),
    };
}

