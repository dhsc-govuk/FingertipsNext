/* tslint:disable */
/* eslint-disable */
/**
 * Fingertips API
 * An API to query public health indicator data.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ProfileFeedback@dhsc.gov.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PeriodType } from './PeriodType';
import {
    PeriodTypeFromJSON,
    PeriodTypeFromJSONTyped,
    PeriodTypeToJSON,
    PeriodTypeToJSONTyped,
} from './PeriodType';

/**
 * A public health indicator
 * @export
 * @interface Indicator
 */
export interface Indicator {
    /**
     * The unique identifier of the indicator
     * @type {number}
     * @memberof Indicator
     */
    indicatorId: number;
    /**
     * The title of the indicator
     * @type {string}
     * @memberof Indicator
     */
    title: string;
    /**
     * The definition of the indicator
     * @type {string}
     * @memberof Indicator
     */
    definition: string;
    /**
     * The period types that the indicator holds data for
     * @type {Array<PeriodType>}
     * @memberof Indicator
     */
    periodTypes?: Array<PeriodType>;
}

/**
 * Check if a given object implements the Indicator interface.
 */
export function instanceOfIndicator(value: object): value is Indicator {
    if (!('indicatorId' in value) || value['indicatorId'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('definition' in value) || value['definition'] === undefined) return false;
    return true;
}

export function IndicatorFromJSON(json: any): Indicator {
    return IndicatorFromJSONTyped(json, false);
}

export function IndicatorFromJSONTyped(json: any, ignoreDiscriminator: boolean): Indicator {
    if (json == null) {
        return json;
    }
    return {
        
        'indicatorId': json['indicator_id'],
        'title': json['title'],
        'definition': json['definition'],
        'periodTypes': json['period_types'] == null ? undefined : ((json['period_types'] as Array<any>).map(PeriodTypeFromJSON)),
    };
}

export function IndicatorToJSON(json: any): Indicator {
    return IndicatorToJSONTyped(json, false);
}

export function IndicatorToJSONTyped(value?: Indicator | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'indicator_id': value['indicatorId'],
        'title': value['title'],
        'definition': value['definition'],
        'period_types': value['periodTypes'] == null ? undefined : ((value['periodTypes'] as Array<any>).map(PeriodTypeToJSON)),
    };
}

